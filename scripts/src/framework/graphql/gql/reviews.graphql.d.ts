/* 935ec5b25ee666fce9f645e196f0dce834c0dc38
 * This file is automatically generated by graphql-let. */

import * as Types from "graphql-let/__generated__/__types__";
import * as Apollo from '@apollo/client';
export declare type ReviewPartsFragment = {
  __typename?: 'Review';
  id: string;
  comment: string;
  rating: number;
  positive_feedbacks_count?: number | null;
  negative_feedbacks_count?: number | null;
  photos: Array<{
    __typename?: 'Attachment';
    id?: string | null;
    thumbnail?: string | null;
    original?: string | null;
  }>;
  user: {
    __typename?: 'User';
    id: string;
    name: string;
  };
  my_feedback?: {
    __typename?: 'Feedback';
    id: string;
    positive?: boolean | null;
    negative?: boolean | null;
  } | null;
};
export declare type ReviewsQueryVariables = Types.Exact<{
  product_id?: Types.InputMaybe<Types.Scalars['ID']>;
  shop_id?: Types.InputMaybe<Types.Scalars['ID']>;
  rating?: Types.InputMaybe<Types.Scalars['Float']>;
  orderBy?: Types.InputMaybe<Array<Types.QueryReviewsOrderByOrderByClause> | Types.QueryReviewsOrderByOrderByClause>;
  first?: Types.InputMaybe<Types.Scalars['Int']>;
  page?: Types.InputMaybe<Types.Scalars['Int']>;
}>;
export declare type ReviewsQuery = {
  __typename?: 'Query';
  reviews: {
    __typename?: 'ReviewPaginator';
    data: Array<{
      __typename?: 'Review';
      id: string;
      comment: string;
      rating: number;
      positive_feedbacks_count?: number | null;
      negative_feedbacks_count?: number | null;
      photos: Array<{
        __typename?: 'Attachment';
        id?: string | null;
        thumbnail?: string | null;
        original?: string | null;
      }>;
      user: {
        __typename?: 'User';
        id: string;
        name: string;
      };
      my_feedback?: {
        __typename?: 'Feedback';
        id: string;
        positive?: boolean | null;
        negative?: boolean | null;
      } | null;
    }>;
    paginatorInfo: {
      __typename?: 'PaginatorInfo';
      count: number;
      currentPage: number;
      firstItem: number;
      hasMorePages: boolean;
      lastItem: number;
      lastPage: number;
      perPage: number;
      total: number;
    };
  };
};
export declare type PaginatorPartsFragment = {
  __typename?: 'PaginatorInfo';
  count: number;
  currentPage: number;
  firstItem: number;
  hasMorePages: boolean;
  lastItem: number;
  lastPage: number;
  perPage: number;
  total: number;
};
export declare type CreateReviewMutationVariables = Types.Exact<{
  input: Types.CreateReviewInput;
}>;
export declare type CreateReviewMutation = {
  __typename?: 'Mutation';
  createReview: {
    __typename?: 'Review';
    id: string;
    comment: string;
    rating: number;
    positive_feedbacks_count?: number | null;
    negative_feedbacks_count?: number | null;
    photos: Array<{
      __typename?: 'Attachment';
      id?: string | null;
      thumbnail?: string | null;
      original?: string | null;
    }>;
    user: {
      __typename?: 'User';
      id: string;
      name: string;
    };
    my_feedback?: {
      __typename?: 'Feedback';
      id: string;
      positive?: boolean | null;
      negative?: boolean | null;
    } | null;
  };
};
export declare type UpdateReviewMutationVariables = Types.Exact<{
  id: Types.Scalars['ID'];
  input: Types.UpdateReviewInput;
}>;
export declare type UpdateReviewMutation = {
  __typename?: 'Mutation';
  updateReview: {
    __typename?: 'Review';
    id: string;
    comment: string;
    rating: number;
    positive_feedbacks_count?: number | null;
    negative_feedbacks_count?: number | null;
    photos: Array<{
      __typename?: 'Attachment';
      id?: string | null;
      thumbnail?: string | null;
      original?: string | null;
    }>;
    user: {
      __typename?: 'User';
      id: string;
      name: string;
    };
    my_feedback?: {
      __typename?: 'Feedback';
      id: string;
      positive?: boolean | null;
      negative?: boolean | null;
    } | null;
  };
};
export declare const ReviewPartsFragmentDoc: Apollo.DocumentNode;
export declare const PaginatorPartsFragmentDoc: Apollo.DocumentNode;
export declare const ReviewsDocument: Apollo.DocumentNode;
/**
 * __useReviewsQuery__
 *
 * To run a query within a React component, call `useReviewsQuery` and pass it any options that fit your needs.
 * When your component renders, `useReviewsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useReviewsQuery({
 *   variables: {
 *      product_id: // value for 'product_id'
 *      shop_id: // value for 'shop_id'
 *      rating: // value for 'rating'
 *      orderBy: // value for 'orderBy'
 *      first: // value for 'first'
 *      page: // value for 'page'
 *   },
 * });
 */

export declare function useReviewsQuery(baseOptions?: Apollo.QueryHookOptions<ReviewsQuery, ReviewsQueryVariables>): Apollo.QueryResult<ReviewsQuery, Types.Exact<{
  product_id?: Types.InputMaybe<string> | undefined;
  shop_id?: Types.InputMaybe<string> | undefined;
  rating?: Types.InputMaybe<number> | undefined;
  orderBy?: Types.InputMaybe<Types.QueryReviewsOrderByOrderByClause | Types.QueryReviewsOrderByOrderByClause[]> | undefined;
  first?: Types.InputMaybe<number> | undefined;
  page?: Types.InputMaybe<number> | undefined;
}>>;
export declare function useReviewsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<ReviewsQuery, ReviewsQueryVariables>): Apollo.QueryTuple<ReviewsQuery, Types.Exact<{
  product_id?: Types.InputMaybe<string> | undefined;
  shop_id?: Types.InputMaybe<string> | undefined;
  rating?: Types.InputMaybe<number> | undefined;
  orderBy?: Types.InputMaybe<Types.QueryReviewsOrderByOrderByClause | Types.QueryReviewsOrderByOrderByClause[]> | undefined;
  first?: Types.InputMaybe<number> | undefined;
  page?: Types.InputMaybe<number> | undefined;
}>>;
export declare type ReviewsQueryHookResult = ReturnType<typeof useReviewsQuery>;
export declare type ReviewsLazyQueryHookResult = ReturnType<typeof useReviewsLazyQuery>;
export declare type ReviewsQueryResult = Apollo.QueryResult<ReviewsQuery, ReviewsQueryVariables>;
export declare const CreateReviewDocument: Apollo.DocumentNode;
export declare type CreateReviewMutationFn = Apollo.MutationFunction<CreateReviewMutation, CreateReviewMutationVariables>;
/**
 * __useCreateReviewMutation__
 *
 * To run a mutation, you first call `useCreateReviewMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateReviewMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createReviewMutation, { data, loading, error }] = useCreateReviewMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */

export declare function useCreateReviewMutation(baseOptions?: Apollo.MutationHookOptions<CreateReviewMutation, CreateReviewMutationVariables>): Apollo.MutationTuple<CreateReviewMutation, Types.Exact<{
  input: Types.CreateReviewInput;
}>, Apollo.DefaultContext, Apollo.ApolloCache<any>>;
export declare type CreateReviewMutationHookResult = ReturnType<typeof useCreateReviewMutation>;
export declare type CreateReviewMutationResult = Apollo.MutationResult<CreateReviewMutation>;
export declare type CreateReviewMutationOptions = Apollo.BaseMutationOptions<CreateReviewMutation, CreateReviewMutationVariables>;
export declare const UpdateReviewDocument: Apollo.DocumentNode;
export declare type UpdateReviewMutationFn = Apollo.MutationFunction<UpdateReviewMutation, UpdateReviewMutationVariables>;
/**
 * __useUpdateReviewMutation__
 *
 * To run a mutation, you first call `useUpdateReviewMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateReviewMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateReviewMutation, { data, loading, error }] = useUpdateReviewMutation({
 *   variables: {
 *      id: // value for 'id'
 *      input: // value for 'input'
 *   },
 * });
 */

export declare function useUpdateReviewMutation(baseOptions?: Apollo.MutationHookOptions<UpdateReviewMutation, UpdateReviewMutationVariables>): Apollo.MutationTuple<UpdateReviewMutation, Types.Exact<{
  id: string;
  input: Types.UpdateReviewInput;
}>, Apollo.DefaultContext, Apollo.ApolloCache<any>>;
export declare type UpdateReviewMutationHookResult = ReturnType<typeof useUpdateReviewMutation>;
export declare type UpdateReviewMutationResult = Apollo.MutationResult<UpdateReviewMutation>;
export declare type UpdateReviewMutationOptions = Apollo.BaseMutationOptions<UpdateReviewMutation, UpdateReviewMutationVariables>;