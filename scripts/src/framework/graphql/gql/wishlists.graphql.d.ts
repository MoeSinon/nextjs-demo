/* c65736683583ca83c641e977deaba5afc201ed27
 * This file is automatically generated by graphql-let. */

import * as Types from "graphql-let/__generated__/__types__";
import * as Apollo from '@apollo/client';
export declare type WishlistsQueryVariables = Types.Exact<{
  first?: Types.InputMaybe<Types.Scalars['Int']>;
  page?: Types.InputMaybe<Types.Scalars['Int']>;
}>;
export declare type WishlistsQuery = {
  __typename?: 'Query';
  wishlists: {
    __typename?: 'ProductPaginator';
    data: Array<{
      __typename?: 'Product';
      id: string;
      name: string;
      slug: string;
      product_type: Types.ProductType;
      price?: number | null;
      sale_price?: number | null;
      min_price?: number | null;
      max_price?: number | null;
      quantity: number;
      unit: string;
      sku?: string | null;
      is_digital?: boolean | null;
      is_external?: boolean | null;
      ratings: number;
      type?: {
        __typename?: 'Type';
        id: string;
        name: string;
        slug: string;
        settings?: {
          __typename?: 'TypeSettings';
          productCard: string;
        } | null;
      } | null;
      shop?: {
        __typename?: 'Shop';
        name: string;
        slug: string;
      } | null;
      image?: {
        __typename?: 'Attachment';
        id?: string | null;
        thumbnail?: string | null;
        original?: string | null;
      } | null;
      tags?: Array<{
        __typename?: 'Tag';
        id: string;
        name: string;
        slug: string;
      }> | null;
      variations?: Array<{
        __typename?: 'AttributeValue';
        id: string;
        value: string;
        meta?: string | null;
        attribute: {
          __typename?: 'Attribute';
          id: string;
          name: string;
          slug: string;
        };
      }> | null;
      variation_options?: Array<{
        __typename?: 'Variation';
        id: string;
        title: string;
        price: number;
        sale_price?: number | null;
        quantity: number;
        is_disable: boolean;
        image?: {
          __typename?: 'Attachment';
          id?: string | null;
          thumbnail?: string | null;
          original?: string | null;
        } | null;
        options: Array<{
          __typename?: 'VariationOption';
          name: string;
          value: string;
        }>;
      }> | null;
    }>;
    paginatorInfo: {
      __typename?: 'PaginatorInfo';
      count: number;
      currentPage: number;
      firstItem: number;
      hasMorePages: boolean;
      lastItem: number;
      lastPage: number;
      perPage: number;
      total: number;
    };
  };
};
export declare type PaginatorPartsFragment = {
  __typename?: 'PaginatorInfo';
  count: number;
  currentPage: number;
  firstItem: number;
  hasMorePages: boolean;
  lastItem: number;
  lastPage: number;
  perPage: number;
  total: number;
};
export declare type InWishlistQueryVariables = Types.Exact<{
  id: Types.Scalars['ID'];
}>;
export declare type InWishlistQuery = {
  __typename?: 'Query';
  in_wishlist: boolean;
};
export declare type ToggleWishlistMutationVariables = Types.Exact<{
  input: Types.CreateWishlistInput;
}>;
export declare type ToggleWishlistMutation = {
  __typename?: 'Mutation';
  toggleWishlist: boolean;
};
export declare type RemoveFromWishlistMutationVariables = Types.Exact<{
  slug: Types.Scalars['String'];
}>;
export declare type RemoveFromWishlistMutation = {
  __typename?: 'Mutation';
  deleteWishlist: boolean;
};
export declare const PaginatorPartsFragmentDoc: Apollo.DocumentNode;
export declare const WishlistsDocument: Apollo.DocumentNode;
/**
 * __useWishlistsQuery__
 *
 * To run a query within a React component, call `useWishlistsQuery` and pass it any options that fit your needs.
 * When your component renders, `useWishlistsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useWishlistsQuery({
 *   variables: {
 *      first: // value for 'first'
 *      page: // value for 'page'
 *   },
 * });
 */

export declare function useWishlistsQuery(baseOptions?: Apollo.QueryHookOptions<WishlistsQuery, WishlistsQueryVariables>): Apollo.QueryResult<WishlistsQuery, Types.Exact<{
  first?: Types.InputMaybe<number> | undefined;
  page?: Types.InputMaybe<number> | undefined;
}>>;
export declare function useWishlistsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<WishlistsQuery, WishlistsQueryVariables>): Apollo.QueryTuple<WishlistsQuery, Types.Exact<{
  first?: Types.InputMaybe<number> | undefined;
  page?: Types.InputMaybe<number> | undefined;
}>>;
export declare type WishlistsQueryHookResult = ReturnType<typeof useWishlistsQuery>;
export declare type WishlistsLazyQueryHookResult = ReturnType<typeof useWishlistsLazyQuery>;
export declare type WishlistsQueryResult = Apollo.QueryResult<WishlistsQuery, WishlistsQueryVariables>;
export declare const InWishlistDocument: Apollo.DocumentNode;
/**
 * __useInWishlistQuery__
 *
 * To run a query within a React component, call `useInWishlistQuery` and pass it any options that fit your needs.
 * When your component renders, `useInWishlistQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useInWishlistQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */

export declare function useInWishlistQuery(baseOptions: Apollo.QueryHookOptions<InWishlistQuery, InWishlistQueryVariables>): Apollo.QueryResult<InWishlistQuery, Types.Exact<{
  id: string;
}>>;
export declare function useInWishlistLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<InWishlistQuery, InWishlistQueryVariables>): Apollo.QueryTuple<InWishlistQuery, Types.Exact<{
  id: string;
}>>;
export declare type InWishlistQueryHookResult = ReturnType<typeof useInWishlistQuery>;
export declare type InWishlistLazyQueryHookResult = ReturnType<typeof useInWishlistLazyQuery>;
export declare type InWishlistQueryResult = Apollo.QueryResult<InWishlistQuery, InWishlistQueryVariables>;
export declare const ToggleWishlistDocument: Apollo.DocumentNode;
export declare type ToggleWishlistMutationFn = Apollo.MutationFunction<ToggleWishlistMutation, ToggleWishlistMutationVariables>;
/**
 * __useToggleWishlistMutation__
 *
 * To run a mutation, you first call `useToggleWishlistMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useToggleWishlistMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [toggleWishlistMutation, { data, loading, error }] = useToggleWishlistMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */

export declare function useToggleWishlistMutation(baseOptions?: Apollo.MutationHookOptions<ToggleWishlistMutation, ToggleWishlistMutationVariables>): Apollo.MutationTuple<ToggleWishlistMutation, Types.Exact<{
  input: Types.CreateWishlistInput;
}>, Apollo.DefaultContext, Apollo.ApolloCache<any>>;
export declare type ToggleWishlistMutationHookResult = ReturnType<typeof useToggleWishlistMutation>;
export declare type ToggleWishlistMutationResult = Apollo.MutationResult<ToggleWishlistMutation>;
export declare type ToggleWishlistMutationOptions = Apollo.BaseMutationOptions<ToggleWishlistMutation, ToggleWishlistMutationVariables>;
export declare const RemoveFromWishlistDocument: Apollo.DocumentNode;
export declare type RemoveFromWishlistMutationFn = Apollo.MutationFunction<RemoveFromWishlistMutation, RemoveFromWishlistMutationVariables>;
/**
 * __useRemoveFromWishlistMutation__
 *
 * To run a mutation, you first call `useRemoveFromWishlistMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useRemoveFromWishlistMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [removeFromWishlistMutation, { data, loading, error }] = useRemoveFromWishlistMutation({
 *   variables: {
 *      slug: // value for 'slug'
 *   },
 * });
 */

export declare function useRemoveFromWishlistMutation(baseOptions?: Apollo.MutationHookOptions<RemoveFromWishlistMutation, RemoveFromWishlistMutationVariables>): Apollo.MutationTuple<RemoveFromWishlistMutation, Types.Exact<{
  slug: string;
}>, Apollo.DefaultContext, Apollo.ApolloCache<any>>;
export declare type RemoveFromWishlistMutationHookResult = ReturnType<typeof useRemoveFromWishlistMutation>;
export declare type RemoveFromWishlistMutationResult = Apollo.MutationResult<RemoveFromWishlistMutation>;
export declare type RemoveFromWishlistMutationOptions = Apollo.BaseMutationOptions<RemoveFromWishlistMutation, RemoveFromWishlistMutationVariables>;