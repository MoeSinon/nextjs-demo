/* ffb04db1c2e70f16f9e9296b05fc0d47864d9525
 * This file is automatically generated by graphql-let. */

import * as Types from "graphql-let/__generated__/__types__";
import * as Apollo from '@apollo/client';
export declare type ManufacturerPartsFragment = {
  __typename?: 'Manufacturer';
  id: string;
  name: string;
  is_approved?: boolean | null;
  slug?: string | null;
  description?: string | null;
  website?: string | null;
  socials?: Array<{
    __typename?: 'ShopSocials';
    url: string;
    icon: string;
  }> | null;
  image?: {
    __typename?: 'Attachment';
    id?: string | null;
    original?: string | null;
    thumbnail?: string | null;
  } | null;
  type: {
    __typename?: 'Type';
    id: string;
    name: string;
    slug: string;
  };
  cover_image?: {
    __typename?: 'Attachment';
    id?: string | null;
    original?: string | null;
    thumbnail?: string | null;
  } | null;
};
export declare type ManufacturersQueryVariables = Types.Exact<{
  hasType?: Types.InputMaybe<Types.QueryManufacturersHasTypeWhereHasConditions>;
  text?: Types.InputMaybe<Types.Scalars['String']>;
  is_approved?: Types.InputMaybe<Types.Scalars['Boolean']>;
  orderBy?: Types.InputMaybe<Array<Types.QueryManufacturersOrderByOrderByClause> | Types.QueryManufacturersOrderByOrderByClause>;
  first?: Types.InputMaybe<Types.Scalars['Int']>;
  page?: Types.InputMaybe<Types.Scalars['Int']>;
  language?: Types.InputMaybe<Types.Scalars['String']>;
}>;
export declare type ManufacturersQuery = {
  __typename?: 'Query';
  manufacturers: {
    __typename?: 'ManufacturerPaginator';
    data: Array<{
      __typename?: 'Manufacturer';
      id: string;
      name: string;
      is_approved?: boolean | null;
      slug?: string | null;
      description?: string | null;
      website?: string | null;
      socials?: Array<{
        __typename?: 'ShopSocials';
        url: string;
        icon: string;
      }> | null;
      image?: {
        __typename?: 'Attachment';
        id?: string | null;
        original?: string | null;
        thumbnail?: string | null;
      } | null;
      type: {
        __typename?: 'Type';
        id: string;
        name: string;
        slug: string;
      };
      cover_image?: {
        __typename?: 'Attachment';
        id?: string | null;
        original?: string | null;
        thumbnail?: string | null;
      } | null;
    }>;
    paginatorInfo: {
      __typename?: 'PaginatorInfo';
      count: number;
      currentPage: number;
      firstItem: number;
      hasMorePages: boolean;
      lastItem: number;
      lastPage: number;
      perPage: number;
      total: number;
    };
  };
};
export declare type PaginatorPartsFragment = {
  __typename?: 'PaginatorInfo';
  count: number;
  currentPage: number;
  firstItem: number;
  hasMorePages: boolean;
  lastItem: number;
  lastPage: number;
  perPage: number;
  total: number;
};
export declare type TopManufacturersQueryVariables = Types.Exact<{
  limit?: Types.InputMaybe<Types.Scalars['Int']>;
  language?: Types.InputMaybe<Types.Scalars['String']>;
}>;
export declare type TopManufacturersQuery = {
  __typename?: 'Query';
  topManufacturers: Array<{
    __typename?: 'Manufacturer';
    id: string;
    name: string;
    is_approved?: boolean | null;
    slug?: string | null;
    description?: string | null;
    website?: string | null;
    socials?: Array<{
      __typename?: 'ShopSocials';
      url: string;
      icon: string;
    }> | null;
    image?: {
      __typename?: 'Attachment';
      id?: string | null;
      original?: string | null;
      thumbnail?: string | null;
    } | null;
    type: {
      __typename?: 'Type';
      id: string;
      name: string;
      slug: string;
    };
    cover_image?: {
      __typename?: 'Attachment';
      id?: string | null;
      original?: string | null;
      thumbnail?: string | null;
    } | null;
  }>;
};
export declare type ManufacturerQueryVariables = Types.Exact<{
  slug?: Types.InputMaybe<Types.Scalars['String']>;
  language?: Types.InputMaybe<Types.Scalars['String']>;
}>;
export declare type ManufacturerQuery = {
  __typename?: 'Query';
  manufacturer: {
    __typename?: 'Manufacturer';
    id: string;
    name: string;
    is_approved?: boolean | null;
    slug?: string | null;
    description?: string | null;
    website?: string | null;
    socials?: Array<{
      __typename?: 'ShopSocials';
      url: string;
      icon: string;
    }> | null;
    image?: {
      __typename?: 'Attachment';
      id?: string | null;
      original?: string | null;
      thumbnail?: string | null;
    } | null;
    type: {
      __typename?: 'Type';
      id: string;
      name: string;
      slug: string;
    };
    cover_image?: {
      __typename?: 'Attachment';
      id?: string | null;
      original?: string | null;
      thumbnail?: string | null;
    } | null;
  };
};
export declare const ManufacturerPartsFragmentDoc: Apollo.DocumentNode;
export declare const PaginatorPartsFragmentDoc: Apollo.DocumentNode;
export declare const ManufacturersDocument: Apollo.DocumentNode;
/**
 * __useManufacturersQuery__
 *
 * To run a query within a React component, call `useManufacturersQuery` and pass it any options that fit your needs.
 * When your component renders, `useManufacturersQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useManufacturersQuery({
 *   variables: {
 *      hasType: // value for 'hasType'
 *      text: // value for 'text'
 *      is_approved: // value for 'is_approved'
 *      orderBy: // value for 'orderBy'
 *      first: // value for 'first'
 *      page: // value for 'page'
 *      language: // value for 'language'
 *   },
 * });
 */

export declare function useManufacturersQuery(baseOptions?: Apollo.QueryHookOptions<ManufacturersQuery, ManufacturersQueryVariables>): Apollo.QueryResult<ManufacturersQuery, Types.Exact<{
  hasType?: Types.InputMaybe<Types.QueryManufacturersHasTypeWhereHasConditions> | undefined;
  text?: Types.InputMaybe<string> | undefined;
  is_approved?: Types.InputMaybe<boolean> | undefined;
  orderBy?: Types.InputMaybe<Types.QueryManufacturersOrderByOrderByClause | Types.QueryManufacturersOrderByOrderByClause[]> | undefined;
  first?: Types.InputMaybe<number> | undefined;
  page?: Types.InputMaybe<number> | undefined;
  language?: Types.InputMaybe<string> | undefined;
}>>;
export declare function useManufacturersLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<ManufacturersQuery, ManufacturersQueryVariables>): Apollo.QueryTuple<ManufacturersQuery, Types.Exact<{
  hasType?: Types.InputMaybe<Types.QueryManufacturersHasTypeWhereHasConditions> | undefined;
  text?: Types.InputMaybe<string> | undefined;
  is_approved?: Types.InputMaybe<boolean> | undefined;
  orderBy?: Types.InputMaybe<Types.QueryManufacturersOrderByOrderByClause | Types.QueryManufacturersOrderByOrderByClause[]> | undefined;
  first?: Types.InputMaybe<number> | undefined;
  page?: Types.InputMaybe<number> | undefined;
  language?: Types.InputMaybe<string> | undefined;
}>>;
export declare type ManufacturersQueryHookResult = ReturnType<typeof useManufacturersQuery>;
export declare type ManufacturersLazyQueryHookResult = ReturnType<typeof useManufacturersLazyQuery>;
export declare type ManufacturersQueryResult = Apollo.QueryResult<ManufacturersQuery, ManufacturersQueryVariables>;
export declare const TopManufacturersDocument: Apollo.DocumentNode;
/**
 * __useTopManufacturersQuery__
 *
 * To run a query within a React component, call `useTopManufacturersQuery` and pass it any options that fit your needs.
 * When your component renders, `useTopManufacturersQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useTopManufacturersQuery({
 *   variables: {
 *      limit: // value for 'limit'
 *      language: // value for 'language'
 *   },
 * });
 */

export declare function useTopManufacturersQuery(baseOptions?: Apollo.QueryHookOptions<TopManufacturersQuery, TopManufacturersQueryVariables>): Apollo.QueryResult<TopManufacturersQuery, Types.Exact<{
  limit?: Types.InputMaybe<number> | undefined;
  language?: Types.InputMaybe<string> | undefined;
}>>;
export declare function useTopManufacturersLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<TopManufacturersQuery, TopManufacturersQueryVariables>): Apollo.QueryTuple<TopManufacturersQuery, Types.Exact<{
  limit?: Types.InputMaybe<number> | undefined;
  language?: Types.InputMaybe<string> | undefined;
}>>;
export declare type TopManufacturersQueryHookResult = ReturnType<typeof useTopManufacturersQuery>;
export declare type TopManufacturersLazyQueryHookResult = ReturnType<typeof useTopManufacturersLazyQuery>;
export declare type TopManufacturersQueryResult = Apollo.QueryResult<TopManufacturersQuery, TopManufacturersQueryVariables>;
export declare const ManufacturerDocument: Apollo.DocumentNode;
/**
 * __useManufacturerQuery__
 *
 * To run a query within a React component, call `useManufacturerQuery` and pass it any options that fit your needs.
 * When your component renders, `useManufacturerQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useManufacturerQuery({
 *   variables: {
 *      slug: // value for 'slug'
 *      language: // value for 'language'
 *   },
 * });
 */

export declare function useManufacturerQuery(baseOptions?: Apollo.QueryHookOptions<ManufacturerQuery, ManufacturerQueryVariables>): Apollo.QueryResult<ManufacturerQuery, Types.Exact<{
  slug?: Types.InputMaybe<string> | undefined;
  language?: Types.InputMaybe<string> | undefined;
}>>;
export declare function useManufacturerLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<ManufacturerQuery, ManufacturerQueryVariables>): Apollo.QueryTuple<ManufacturerQuery, Types.Exact<{
  slug?: Types.InputMaybe<string> | undefined;
  language?: Types.InputMaybe<string> | undefined;
}>>;
export declare type ManufacturerQueryHookResult = ReturnType<typeof useManufacturerQuery>;
export declare type ManufacturerLazyQueryHookResult = ReturnType<typeof useManufacturerLazyQuery>;
export declare type ManufacturerQueryResult = Apollo.QueryResult<ManufacturerQuery, ManufacturerQueryVariables>;