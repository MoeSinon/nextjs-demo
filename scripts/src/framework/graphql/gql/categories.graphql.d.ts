/* 5240082c8a8348c6c7146d97db7e2035a24d7df6
 * This file is automatically generated by graphql-let. */

import * as Types from "graphql-let/__generated__/__types__";
import * as Apollo from '@apollo/client';
export declare type CategoryPartsFragment = {
  __typename?: 'Category';
  id: string;
  name: string;
  slug: string;
  language: string;
  translated_languages: Array<string>;
  details?: string | null;
  parent_id?: string | null;
  products_count?: number | null;
  icon?: string | null;
  image?: {
    __typename?: 'Attachment';
    id?: string | null;
    original?: string | null;
    thumbnail?: string | null;
  } | null;
  type?: {
    __typename?: 'Type';
    id: string;
    name: string;
    slug: string;
  } | null;
};
export declare type CategoriesQueryVariables = Types.Exact<{
  orderBy?: Types.InputMaybe<Array<Types.QueryCategoriesOrderByOrderByClause> | Types.QueryCategoriesOrderByOrderByClause>;
  hasType?: Types.InputMaybe<Types.QueryCategoriesHasTypeWhereHasConditions>;
  name?: Types.InputMaybe<Types.Scalars['String']>;
  first?: Types.InputMaybe<Types.Scalars['Int']>;
  page?: Types.InputMaybe<Types.Scalars['Int']>;
  parent?: Types.InputMaybe<Types.Scalars['ID']>;
  language?: Types.InputMaybe<Types.Scalars['String']>;
}>;
export declare type CategoriesQuery = {
  __typename?: 'Query';
  categories: {
    __typename?: 'CategoryPaginator';
    data: Array<{
      __typename?: 'Category';
      id: string;
      name: string;
      slug: string;
      language: string;
      translated_languages: Array<string>;
      details?: string | null;
      parent_id?: string | null;
      products_count?: number | null;
      icon?: string | null;
      children?: Array<{
        __typename?: 'Category';
        id: string;
        name: string;
        slug: string;
        language: string;
        translated_languages: Array<string>;
        details?: string | null;
        parent_id?: string | null;
        products_count?: number | null;
        icon?: string | null;
        children?: Array<{
          __typename?: 'Category';
          id: string;
          name: string;
          slug: string;
          language: string;
          translated_languages: Array<string>;
          details?: string | null;
          parent_id?: string | null;
          products_count?: number | null;
          icon?: string | null;
          image?: {
            __typename?: 'Attachment';
            id?: string | null;
            original?: string | null;
            thumbnail?: string | null;
          } | null;
          type?: {
            __typename?: 'Type';
            id: string;
            name: string;
            slug: string;
          } | null;
        } | null> | null;
        image?: {
          __typename?: 'Attachment';
          id?: string | null;
          original?: string | null;
          thumbnail?: string | null;
        } | null;
        type?: {
          __typename?: 'Type';
          id: string;
          name: string;
          slug: string;
        } | null;
      } | null> | null;
      image?: {
        __typename?: 'Attachment';
        id?: string | null;
        original?: string | null;
        thumbnail?: string | null;
      } | null;
      type?: {
        __typename?: 'Type';
        id: string;
        name: string;
        slug: string;
      } | null;
    }>;
    paginatorInfo: {
      __typename?: 'PaginatorInfo';
      count: number;
      currentPage: number;
      firstItem: number;
      hasMorePages: boolean;
      lastItem: number;
      lastPage: number;
      perPage: number;
      total: number;
    };
  };
};
export declare type PaginatorPartsFragment = {
  __typename?: 'PaginatorInfo';
  count: number;
  currentPage: number;
  firstItem: number;
  hasMorePages: boolean;
  lastItem: number;
  lastPage: number;
  perPage: number;
  total: number;
};
export declare const CategoryPartsFragmentDoc: Apollo.DocumentNode;
export declare const PaginatorPartsFragmentDoc: Apollo.DocumentNode;
export declare const CategoriesDocument: Apollo.DocumentNode;
/**
 * __useCategoriesQuery__
 *
 * To run a query within a React component, call `useCategoriesQuery` and pass it any options that fit your needs.
 * When your component renders, `useCategoriesQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCategoriesQuery({
 *   variables: {
 *      orderBy: // value for 'orderBy'
 *      hasType: // value for 'hasType'
 *      name: // value for 'name'
 *      first: // value for 'first'
 *      page: // value for 'page'
 *      parent: // value for 'parent'
 *      language: // value for 'language'
 *   },
 * });
 */

export declare function useCategoriesQuery(baseOptions?: Apollo.QueryHookOptions<CategoriesQuery, CategoriesQueryVariables>): Apollo.QueryResult<CategoriesQuery, Types.Exact<{
  orderBy?: Types.InputMaybe<Types.QueryCategoriesOrderByOrderByClause | Types.QueryCategoriesOrderByOrderByClause[]> | undefined;
  hasType?: Types.InputMaybe<Types.QueryCategoriesHasTypeWhereHasConditions> | undefined;
  name?: Types.InputMaybe<string> | undefined;
  first?: Types.InputMaybe<number> | undefined;
  page?: Types.InputMaybe<number> | undefined;
  parent?: Types.InputMaybe<string> | undefined;
  language?: Types.InputMaybe<string> | undefined;
}>>;
export declare function useCategoriesLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<CategoriesQuery, CategoriesQueryVariables>): Apollo.QueryTuple<CategoriesQuery, Types.Exact<{
  orderBy?: Types.InputMaybe<Types.QueryCategoriesOrderByOrderByClause | Types.QueryCategoriesOrderByOrderByClause[]> | undefined;
  hasType?: Types.InputMaybe<Types.QueryCategoriesHasTypeWhereHasConditions> | undefined;
  name?: Types.InputMaybe<string> | undefined;
  first?: Types.InputMaybe<number> | undefined;
  page?: Types.InputMaybe<number> | undefined;
  parent?: Types.InputMaybe<string> | undefined;
  language?: Types.InputMaybe<string> | undefined;
}>>;
export declare type CategoriesQueryHookResult = ReturnType<typeof useCategoriesQuery>;
export declare type CategoriesLazyQueryHookResult = ReturnType<typeof useCategoriesLazyQuery>;
export declare type CategoriesQueryResult = Apollo.QueryResult<CategoriesQuery, CategoriesQueryVariables>;