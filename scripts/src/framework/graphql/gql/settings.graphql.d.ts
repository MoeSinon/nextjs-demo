/* 87256231fc489a024f67f1f317ce1bedb76313c6
 * This file is automatically generated by graphql-let. */

import * as Types from "graphql-let/__generated__/__types__";
import * as Apollo from '@apollo/client';
export declare type SettingsQueryVariables = Types.Exact<{
  language?: Types.InputMaybe<Types.Scalars['String']>;
}>;
export declare type SettingsQuery = {
  __typename?: 'Query';
  settings: {
    __typename?: 'Setting';
    id: string;
    options: {
      __typename?: 'SettingsOptions';
      siteTitle: string;
      siteSubtitle: string;
      currency: string;
      useOtp: boolean;
      taxClass: string;
      shippingClass: string;
      deliveryTime: Array<{
        __typename?: 'DeliveryTime';
        title: string;
        description: string;
      }>;
      logo: {
        __typename?: 'Attachment';
        id?: string | null;
        thumbnail?: string | null;
        original?: string | null;
      };
      contactDetails: {
        __typename?: 'ContactDetails';
        contact: string;
        website: string;
        socials: Array<{
          __typename?: 'ShopSocials';
          icon: string;
          url: string;
        }>;
        location: {
          __typename?: 'Location';
          lat?: number | null;
          lng?: number | null;
          city?: string | null;
          state?: string | null;
          country?: string | null;
          zip?: string | null;
          formattedAddress?: string | null;
        };
      };
      seo: {
        __typename?: 'SeoSettings';
        metaTitle?: string | null;
        metaDescription?: string | null;
        ogTitle?: string | null;
        ogDescription?: string | null;
        twitterHandle?: string | null;
        twitterCardType?: string | null;
        metaTags?: string | null;
        canonicalUrl?: string | null;
        ogImage?: {
          __typename?: 'Attachment';
          id?: string | null;
          thumbnail?: string | null;
          original?: string | null;
        } | null;
      };
      google?: {
        __typename?: 'GoogleSettings';
        isEnable: boolean;
        tagManagerId: string;
      } | null;
      facebook?: {
        __typename?: 'FacebookSettings';
        isEnable: boolean;
        appId: string;
        pageId: string;
      } | null;
    };
  };
};
export declare type SubscribeToNewsletterMutationVariables = Types.Exact<{
  email: Types.Scalars['String'];
}>;
export declare type SubscribeToNewsletterMutation = {
  __typename?: 'Mutation';
  subscribeToNewsletter: boolean;
};
export declare type ContactUsMutationVariables = Types.Exact<{
  input: Types.ContactInput;
}>;
export declare type ContactUsMutation = {
  __typename?: 'Mutation';
  contactUs: {
    __typename?: 'ContactResponse';
    message: string;
    success: boolean;
  };
};
export declare const SettingsDocument: Apollo.DocumentNode;
/**
 * __useSettingsQuery__
 *
 * To run a query within a React component, call `useSettingsQuery` and pass it any options that fit your needs.
 * When your component renders, `useSettingsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useSettingsQuery({
 *   variables: {
 *      language: // value for 'language'
 *   },
 * });
 */

export declare function useSettingsQuery(baseOptions?: Apollo.QueryHookOptions<SettingsQuery, SettingsQueryVariables>): Apollo.QueryResult<SettingsQuery, Types.Exact<{
  language?: Types.InputMaybe<string> | undefined;
}>>;
export declare function useSettingsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<SettingsQuery, SettingsQueryVariables>): Apollo.QueryTuple<SettingsQuery, Types.Exact<{
  language?: Types.InputMaybe<string> | undefined;
}>>;
export declare type SettingsQueryHookResult = ReturnType<typeof useSettingsQuery>;
export declare type SettingsLazyQueryHookResult = ReturnType<typeof useSettingsLazyQuery>;
export declare type SettingsQueryResult = Apollo.QueryResult<SettingsQuery, SettingsQueryVariables>;
export declare const SubscribeToNewsletterDocument: Apollo.DocumentNode;
export declare type SubscribeToNewsletterMutationFn = Apollo.MutationFunction<SubscribeToNewsletterMutation, SubscribeToNewsletterMutationVariables>;
/**
 * __useSubscribeToNewsletterMutation__
 *
 * To run a mutation, you first call `useSubscribeToNewsletterMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useSubscribeToNewsletterMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [subscribeToNewsletterMutation, { data, loading, error }] = useSubscribeToNewsletterMutation({
 *   variables: {
 *      email: // value for 'email'
 *   },
 * });
 */

export declare function useSubscribeToNewsletterMutation(baseOptions?: Apollo.MutationHookOptions<SubscribeToNewsletterMutation, SubscribeToNewsletterMutationVariables>): Apollo.MutationTuple<SubscribeToNewsletterMutation, Types.Exact<{
  email: string;
}>, Apollo.DefaultContext, Apollo.ApolloCache<any>>;
export declare type SubscribeToNewsletterMutationHookResult = ReturnType<typeof useSubscribeToNewsletterMutation>;
export declare type SubscribeToNewsletterMutationResult = Apollo.MutationResult<SubscribeToNewsletterMutation>;
export declare type SubscribeToNewsletterMutationOptions = Apollo.BaseMutationOptions<SubscribeToNewsletterMutation, SubscribeToNewsletterMutationVariables>;
export declare const ContactUsDocument: Apollo.DocumentNode;
export declare type ContactUsMutationFn = Apollo.MutationFunction<ContactUsMutation, ContactUsMutationVariables>;
/**
 * __useContactUsMutation__
 *
 * To run a mutation, you first call `useContactUsMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useContactUsMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [contactUsMutation, { data, loading, error }] = useContactUsMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */

export declare function useContactUsMutation(baseOptions?: Apollo.MutationHookOptions<ContactUsMutation, ContactUsMutationVariables>): Apollo.MutationTuple<ContactUsMutation, Types.Exact<{
  input: Types.ContactInput;
}>, Apollo.DefaultContext, Apollo.ApolloCache<any>>;
export declare type ContactUsMutationHookResult = ReturnType<typeof useContactUsMutation>;
export declare type ContactUsMutationResult = Apollo.MutationResult<ContactUsMutation>;
export declare type ContactUsMutationOptions = Apollo.BaseMutationOptions<ContactUsMutation, ContactUsMutationVariables>;