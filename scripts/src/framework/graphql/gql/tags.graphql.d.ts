/* f012228add3320fede13e28a7a8d106bb8164af9
 * This file is automatically generated by graphql-let. */

import * as Types from "graphql-let/__generated__/__types__";
import * as Apollo from '@apollo/client';
export declare type TagPartsFragment = {
  __typename?: 'Tag';
  id: string;
  name: string;
  slug: string;
  details?: string | null;
  icon?: string | null;
  image?: {
    __typename?: 'Attachment';
    id?: string | null;
    original?: string | null;
    thumbnail?: string | null;
  } | null;
  type?: {
    __typename?: 'Type';
    id: string;
    name: string;
    slug: string;
  } | null;
};
export declare type TagsQueryVariables = Types.Exact<{
  orderBy?: Types.InputMaybe<Array<Types.QueryTagsOrderByOrderByClause> | Types.QueryTagsOrderByOrderByClause>;
  name?: Types.InputMaybe<Types.Scalars['String']>;
  text?: Types.InputMaybe<Types.Scalars['String']>;
  hasType?: Types.InputMaybe<Types.QueryTagsHasTypeWhereHasConditions>;
  first?: Types.InputMaybe<Types.Scalars['Int']>;
  page?: Types.InputMaybe<Types.Scalars['Int']>;
  language?: Types.InputMaybe<Types.Scalars['String']>;
}>;
export declare type TagsQuery = {
  __typename?: 'Query';
  tags: {
    __typename?: 'TagPaginator';
    data: Array<{
      __typename?: 'Tag';
      id: string;
      name: string;
      slug: string;
      details?: string | null;
      icon?: string | null;
      image?: {
        __typename?: 'Attachment';
        id?: string | null;
        original?: string | null;
        thumbnail?: string | null;
      } | null;
      type?: {
        __typename?: 'Type';
        id: string;
        name: string;
        slug: string;
      } | null;
    }>;
  };
};
export declare const TagPartsFragmentDoc: Apollo.DocumentNode;
export declare const TagsDocument: Apollo.DocumentNode;
/**
 * __useTagsQuery__
 *
 * To run a query within a React component, call `useTagsQuery` and pass it any options that fit your needs.
 * When your component renders, `useTagsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useTagsQuery({
 *   variables: {
 *      orderBy: // value for 'orderBy'
 *      name: // value for 'name'
 *      text: // value for 'text'
 *      hasType: // value for 'hasType'
 *      first: // value for 'first'
 *      page: // value for 'page'
 *      language: // value for 'language'
 *   },
 * });
 */

export declare function useTagsQuery(baseOptions?: Apollo.QueryHookOptions<TagsQuery, TagsQueryVariables>): Apollo.QueryResult<TagsQuery, Types.Exact<{
  orderBy?: Types.InputMaybe<Types.QueryTagsOrderByOrderByClause | Types.QueryTagsOrderByOrderByClause[]> | undefined;
  name?: Types.InputMaybe<string> | undefined;
  text?: Types.InputMaybe<string> | undefined;
  hasType?: Types.InputMaybe<Types.QueryTagsHasTypeWhereHasConditions> | undefined;
  first?: Types.InputMaybe<number> | undefined;
  page?: Types.InputMaybe<number> | undefined;
  language?: Types.InputMaybe<string> | undefined;
}>>;
export declare function useTagsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<TagsQuery, TagsQueryVariables>): Apollo.QueryTuple<TagsQuery, Types.Exact<{
  orderBy?: Types.InputMaybe<Types.QueryTagsOrderByOrderByClause | Types.QueryTagsOrderByOrderByClause[]> | undefined;
  name?: Types.InputMaybe<string> | undefined;
  text?: Types.InputMaybe<string> | undefined;
  hasType?: Types.InputMaybe<Types.QueryTagsHasTypeWhereHasConditions> | undefined;
  first?: Types.InputMaybe<number> | undefined;
  page?: Types.InputMaybe<number> | undefined;
  language?: Types.InputMaybe<string> | undefined;
}>>;
export declare type TagsQueryHookResult = ReturnType<typeof useTagsQuery>;
export declare type TagsLazyQueryHookResult = ReturnType<typeof useTagsLazyQuery>;
export declare type TagsQueryResult = Apollo.QueryResult<TagsQuery, TagsQueryVariables>;