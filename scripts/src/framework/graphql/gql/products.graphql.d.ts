/* 4da5a7ef5f11b32452a0dbae007715be5eb1a3d9
 * This file is automatically generated by graphql-let. */

import * as Types from "graphql-let/__generated__/__types__";
import * as Apollo from '@apollo/client';
export declare type QuestionPartsFragment = {
  __typename?: 'Question';
  id: string;
  question?: string | null;
  answer?: string | null;
  created_at: any;
  positive_feedbacks_count?: number | null;
  negative_feedbacks_count?: number | null;
  user?: {
    __typename?: 'User';
    id: string;
    name: string;
    email: string;
  } | null;
  my_feedback?: {
    __typename?: 'Feedback';
    id: string;
    positive?: boolean | null;
    negative?: boolean | null;
  } | null;
};
export declare type ProductsQueryVariables = Types.Exact<{
  search?: Types.InputMaybe<Types.Scalars['String']>;
  date_range?: Types.InputMaybe<Types.Scalars['String']>;
  orderBy?: Types.InputMaybe<Types.Scalars['String']>;
  sortedBy?: Types.InputMaybe<Types.Scalars['String']>;
  language?: Types.InputMaybe<Types.Scalars['String']>;
  searchJoin?: Types.InputMaybe<Types.Scalars['String']>;
  first?: Types.InputMaybe<Types.Scalars['Int']>;
  page?: Types.InputMaybe<Types.Scalars['Int']>;
}>;
export declare type ProductsQuery = {
  __typename?: 'Query';
  products: {
    __typename?: 'ProductPaginator';
    data: Array<{
      __typename?: 'Product';
      id: string;
      name: string;
      slug: string;
      product_type: Types.ProductType;
      price?: number | null;
      sale_price?: number | null;
      min_price?: number | null;
      max_price?: number | null;
      quantity: number;
      unit: string;
      sku?: string | null;
      is_digital?: boolean | null;
      is_external?: boolean | null;
      ratings: number;
      author?: {
        __typename?: 'Author';
        name: string;
        slug?: string | null;
        id: string;
      } | null;
      type?: {
        __typename?: 'Type';
        id: string;
        name: string;
        slug: string;
        settings?: {
          __typename?: 'TypeSettings';
          productCard: string;
        } | null;
      } | null;
      image?: {
        __typename?: 'Attachment';
        id?: string | null;
        thumbnail?: string | null;
        original?: string | null;
      } | null;
      tags?: Array<{
        __typename?: 'Tag';
        id: string;
        name: string;
        slug: string;
      }> | null;
    }>;
    paginatorInfo: {
      __typename?: 'PaginatorInfo';
      count: number;
      currentPage: number;
      firstItem: number;
      hasMorePages: boolean;
      lastItem: number;
      lastPage: number;
      perPage: number;
      total: number;
    };
  };
};
export declare type ProductPartsFragment = {
  __typename?: 'Product';
  id: string;
  name: string;
  slug: string;
  product_type: Types.ProductType;
  price?: number | null;
  sale_price?: number | null;
  min_price?: number | null;
  max_price?: number | null;
  quantity: number;
  unit: string;
  sku?: string | null;
  is_digital?: boolean | null;
  is_external?: boolean | null;
  ratings: number;
  type?: {
    __typename?: 'Type';
    id: string;
    name: string;
    slug: string;
    settings?: {
      __typename?: 'TypeSettings';
      productCard: string;
    } | null;
  } | null;
  image?: {
    __typename?: 'Attachment';
    id?: string | null;
    thumbnail?: string | null;
    original?: string | null;
  } | null;
  tags?: Array<{
    __typename?: 'Tag';
    id: string;
    name: string;
    slug: string;
  }> | null;
};
export declare type PaginatorPartsFragment = {
  __typename?: 'PaginatorInfo';
  count: number;
  currentPage: number;
  firstItem: number;
  hasMorePages: boolean;
  lastItem: number;
  lastPage: number;
  perPage: number;
  total: number;
};
export declare type ProductQueryVariables = Types.Exact<{
  id?: Types.InputMaybe<Types.Scalars['ID']>;
  slug?: Types.InputMaybe<Types.Scalars['String']>;
  language?: Types.InputMaybe<Types.Scalars['String']>;
}>;
export declare type ProductQuery = {
  __typename?: 'Query';
  product: {
    __typename?: 'Product';
    shop_id?: string | null;
    description?: string | null;
    id: string;
    name: string;
    slug: string;
    product_type: Types.ProductType;
    price?: number | null;
    sale_price?: number | null;
    min_price?: number | null;
    max_price?: number | null;
    quantity: number;
    unit: string;
    sku?: string | null;
    is_digital?: boolean | null;
    is_external?: boolean | null;
    ratings: number;
    author?: {
      __typename?: 'Author';
      id: string;
      name: string;
      slug?: string | null;
      is_approved?: boolean | null;
      bio?: string | null;
      quote?: string | null;
      born?: string | null;
      death?: string | null;
      languages?: string | null;
      socials?: Array<{
        __typename?: 'ShopSocials';
        url: string;
        icon: string;
      }> | null;
      image?: {
        __typename?: 'Attachment';
        id?: string | null;
        original?: string | null;
        thumbnail?: string | null;
      } | null;
      cover_image?: {
        __typename?: 'Attachment';
        id?: string | null;
        original?: string | null;
        thumbnail?: string | null;
      } | null;
    } | null;
    manufacturer?: {
      __typename?: 'Manufacturer';
      id: string;
      name: string;
      slug?: string | null;
    } | null;
    shop?: {
      __typename?: 'Shop';
      id: string;
      name: string;
      slug: string;
    } | null;
    categories?: Array<{
      __typename?: 'Category';
      id: string;
      name: string;
      slug: string;
      children?: Array<{
        __typename?: 'Category';
        id: string;
        name: string;
        slug: string;
      } | null> | null;
    }> | null;
    gallery?: Array<{
      __typename?: 'Attachment';
      id?: string | null;
      thumbnail?: string | null;
      original?: string | null;
    }> | null;
    variations?: Array<{
      __typename?: 'AttributeValue';
      id: string;
      value: string;
      meta?: string | null;
      attribute: {
        __typename?: 'Attribute';
        id: string;
        name: string;
        slug: string;
      };
    }> | null;
    variation_options?: Array<{
      __typename?: 'Variation';
      id: string;
      title: string;
      price: number;
      sale_price?: number | null;
      quantity: number;
      is_disable: boolean;
      image?: {
        __typename?: 'Attachment';
        id?: string | null;
        thumbnail?: string | null;
        original?: string | null;
      } | null;
      options: Array<{
        __typename?: 'VariationOption';
        name: string;
        value: string;
      }>;
    }> | null;
    related_products?: Array<{
      __typename?: 'Product';
      id: string;
      name: string;
      slug: string;
      product_type: Types.ProductType;
      price?: number | null;
      sale_price?: number | null;
      min_price?: number | null;
      max_price?: number | null;
      quantity: number;
      unit: string;
      sku?: string | null;
      is_digital?: boolean | null;
      is_external?: boolean | null;
      ratings: number;
      type?: {
        __typename?: 'Type';
        id: string;
        name: string;
        slug: string;
        settings?: {
          __typename?: 'TypeSettings';
          productCard: string;
        } | null;
      } | null;
      image?: {
        __typename?: 'Attachment';
        id?: string | null;
        thumbnail?: string | null;
        original?: string | null;
      } | null;
      tags?: Array<{
        __typename?: 'Tag';
        id: string;
        name: string;
        slug: string;
      }> | null;
    }> | null;
    type?: {
      __typename?: 'Type';
      id: string;
      name: string;
      slug: string;
      settings?: {
        __typename?: 'TypeSettings';
        productCard: string;
      } | null;
    } | null;
    image?: {
      __typename?: 'Attachment';
      id?: string | null;
      thumbnail?: string | null;
      original?: string | null;
    } | null;
    tags?: Array<{
      __typename?: 'Tag';
      id: string;
      name: string;
      slug: string;
    }> | null;
  };
};
export declare type AuthorPartsFragment = {
  __typename?: 'Author';
  id: string;
  name: string;
  is_approved?: boolean | null;
  slug?: string | null;
  bio?: string | null;
  quote?: string | null;
  born?: string | null;
  death?: string | null;
  languages?: string | null;
  socials?: Array<{
    __typename?: 'ShopSocials';
    url: string;
    icon: string;
  }> | null;
  image?: {
    __typename?: 'Attachment';
    id?: string | null;
    original?: string | null;
    thumbnail?: string | null;
  } | null;
  cover_image?: {
    __typename?: 'Attachment';
    id?: string | null;
    original?: string | null;
    thumbnail?: string | null;
  } | null;
};
export declare type PopularProductsQueryVariables = Types.Exact<{
  limit?: Types.InputMaybe<Types.Scalars['Int']>;
  type_slug?: Types.InputMaybe<Types.Scalars['String']>;
  range?: Types.InputMaybe<Types.Scalars['Int']>;
}>;
export declare type PopularProductsQuery = {
  __typename?: 'Query';
  popularProducts: Array<{
    __typename?: 'Product';
    id: string;
    name: string;
    slug: string;
    product_type: Types.ProductType;
    price?: number | null;
    sale_price?: number | null;
    min_price?: number | null;
    max_price?: number | null;
    quantity: number;
    unit: string;
    sku?: string | null;
    is_digital?: boolean | null;
    is_external?: boolean | null;
    ratings: number;
    author?: {
      __typename?: 'Author';
      name: string;
      slug?: string | null;
      id: string;
    } | null;
    type?: {
      __typename?: 'Type';
      id: string;
      name: string;
      slug: string;
      settings?: {
        __typename?: 'TypeSettings';
        productCard: string;
      } | null;
    } | null;
    image?: {
      __typename?: 'Attachment';
      id?: string | null;
      thumbnail?: string | null;
      original?: string | null;
    } | null;
    tags?: Array<{
      __typename?: 'Tag';
      id: string;
      name: string;
      slug: string;
    }> | null;
  }>;
};
export declare type DownloadableProductsQueryVariables = Types.Exact<{
  first?: Types.InputMaybe<Types.Scalars['Int']>;
  page?: Types.InputMaybe<Types.Scalars['Int']>;
}>;
export declare type DownloadableProductsQuery = {
  __typename?: 'Query';
  downloads: {
    __typename?: 'OrderedFilePaginator';
    data: Array<{
      __typename?: 'OrderFiles';
      id: string;
      purchase_key: string;
      digital_file_id: number;
      created_at: any;
      file?: {
        __typename?: 'DigitalFile';
        fileable?: {
          __typename: 'Product';
          name: string;
          slug: string;
          image?: {
            __typename?: 'Attachment';
            id?: string | null;
            thumbnail?: string | null;
            original?: string | null;
          } | null;
          shop?: {
            __typename?: 'Shop';
            name: string;
            slug: string;
          } | null;
        } | {
          __typename: 'Variation';
          title: string;
          product?: {
            __typename?: 'Product';
            name: string;
            image?: {
              __typename?: 'Attachment';
              id?: string | null;
              thumbnail?: string | null;
              original?: string | null;
            } | null;
          } | null;
          image?: {
            __typename?: 'Attachment';
            id?: string | null;
          } | null;
        } | null;
      } | null;
    }>;
    paginatorInfo: {
      __typename?: 'PaginatorInfo';
      count: number;
      currentPage: number;
      firstItem: number;
      hasMorePages: boolean;
      lastItem: number;
      lastPage: number;
      perPage: number;
      total: number;
    };
  };
};
export declare type QuestionsQueryVariables = Types.Exact<{
  product_id?: Types.InputMaybe<Types.Scalars['ID']>;
  shop_id?: Types.InputMaybe<Types.Scalars['ID']>;
  question?: Types.InputMaybe<Types.Scalars['String']>;
  orderBy?: Types.InputMaybe<Array<Types.QueryQuestionsOrderByOrderByClause> | Types.QueryQuestionsOrderByOrderByClause>;
  first?: Types.InputMaybe<Types.Scalars['Int']>;
  page?: Types.InputMaybe<Types.Scalars['Int']>;
}>;
export declare type QuestionsQuery = {
  __typename?: 'Query';
  questions: {
    __typename?: 'QuestionPaginator';
    data: Array<{
      __typename?: 'Question';
      id: string;
      question?: string | null;
      answer?: string | null;
      created_at: any;
      positive_feedbacks_count?: number | null;
      negative_feedbacks_count?: number | null;
      user?: {
        __typename?: 'User';
        id: string;
        name: string;
        email: string;
      } | null;
      my_feedback?: {
        __typename?: 'Feedback';
        id: string;
        positive?: boolean | null;
        negative?: boolean | null;
      } | null;
    }>;
    paginatorInfo: {
      __typename?: 'PaginatorInfo';
      count: number;
      currentPage: number;
      firstItem: number;
      hasMorePages: boolean;
      lastItem: number;
      lastPage: number;
      perPage: number;
      total: number;
    };
  };
};
export declare type MyQuestionsQueryVariables = Types.Exact<{
  orderBy?: Types.InputMaybe<Array<Types.QueryMyQuestionsOrderByOrderByClause> | Types.QueryMyQuestionsOrderByOrderByClause>;
  first?: Types.InputMaybe<Types.Scalars['Int']>;
  page?: Types.InputMaybe<Types.Scalars['Int']>;
}>;
export declare type MyQuestionsQuery = {
  __typename?: 'Query';
  myQuestions: {
    __typename?: 'MyQuestionPaginator';
    data: Array<{
      __typename?: 'Question';
      id: string;
      question?: string | null;
      answer?: string | null;
      created_at: any;
      positive_feedbacks_count?: number | null;
      negative_feedbacks_count?: number | null;
      product: {
        __typename?: 'Product';
        id: string;
        name: string;
        slug: string;
        product_type: Types.ProductType;
        price?: number | null;
        sale_price?: number | null;
        min_price?: number | null;
        max_price?: number | null;
        quantity: number;
        unit: string;
        sku?: string | null;
        is_digital?: boolean | null;
        is_external?: boolean | null;
        ratings: number;
        type?: {
          __typename?: 'Type';
          id: string;
          name: string;
          slug: string;
          settings?: {
            __typename?: 'TypeSettings';
            productCard: string;
          } | null;
        } | null;
        image?: {
          __typename?: 'Attachment';
          id?: string | null;
          thumbnail?: string | null;
          original?: string | null;
        } | null;
        tags?: Array<{
          __typename?: 'Tag';
          id: string;
          name: string;
          slug: string;
        }> | null;
      };
      user?: {
        __typename?: 'User';
        id: string;
        name: string;
        email: string;
      } | null;
      my_feedback?: {
        __typename?: 'Feedback';
        id: string;
        positive?: boolean | null;
        negative?: boolean | null;
      } | null;
    }>;
    paginatorInfo: {
      __typename?: 'PaginatorInfo';
      count: number;
      currentPage: number;
      firstItem: number;
      hasMorePages: boolean;
      lastItem: number;
      lastPage: number;
      perPage: number;
      total: number;
    };
  };
};
export declare type MyReportsQueryVariables = Types.Exact<{
  orderBy?: Types.InputMaybe<Array<Types.QueryMyReportsOrderByOrderByClause> | Types.QueryMyReportsOrderByOrderByClause>;
  first?: Types.InputMaybe<Types.Scalars['Int']>;
  page?: Types.InputMaybe<Types.Scalars['Int']>;
}>;
export declare type MyReportsQuery = {
  __typename?: 'Query';
  myReports: {
    __typename?: 'MyReportPaginator';
    data: Array<{
      __typename?: 'AbusiveReport';
      id: string;
      user_id?: number | null;
      model_id?: string | null;
      model_type: string;
      message: string;
      created_at: any;
      updated_at: any;
      user: {
        __typename?: 'User';
        id: string;
        name: string;
        email: string;
      };
    }>;
    paginatorInfo: {
      __typename?: 'PaginatorInfo';
      count: number;
      currentPage: number;
      firstItem: number;
      hasMorePages: boolean;
      lastItem: number;
      lastPage: number;
      perPage: number;
      total: number;
    };
  };
};
export declare type AbusiveReportPartsFragment = {
  __typename?: 'AbusiveReport';
  id: string;
  user_id?: number | null;
  model_id?: string | null;
  model_type: string;
  message: string;
  created_at: any;
  updated_at: any;
  user: {
    __typename?: 'User';
    id: string;
    name: string;
    email: string;
  };
};
export declare type GenerateDownloadableUrlMutationVariables = Types.Exact<{
  input: Types.GenerateDownloadableUrlInput;
}>;
export declare type GenerateDownloadableUrlMutation = {
  __typename?: 'Mutation';
  generateDownloadableUrl: string;
};
export declare type CreateQuestionMutationVariables = Types.Exact<{
  input: Types.CreateQuestionInput;
}>;
export declare type CreateQuestionMutation = {
  __typename?: 'Mutation';
  createQuestion: {
    __typename?: 'Question';
    id: string;
    question?: string | null;
    answer?: string | null;
    created_at: any;
    positive_feedbacks_count?: number | null;
    negative_feedbacks_count?: number | null;
    user?: {
      __typename?: 'User';
      id: string;
      name: string;
      email: string;
    } | null;
    my_feedback?: {
      __typename?: 'Feedback';
      id: string;
      positive?: boolean | null;
      negative?: boolean | null;
    } | null;
  };
};
export declare type CreateFeedbackMutationVariables = Types.Exact<{
  input: Types.CreateFeedbackInput;
}>;
export declare type CreateFeedbackMutation = {
  __typename?: 'Mutation';
  createFeedback: {
    __typename?: 'Feedback';
    id: string;
    positive?: boolean | null;
    negative?: boolean | null;
  };
};
export declare type CreateAbuseReportMutationVariables = Types.Exact<{
  input: Types.CreateAbusiveReportInput;
}>;
export declare type CreateAbuseReportMutation = {
  __typename?: 'Mutation';
  createAbusiveReport: {
    __typename?: 'AbusiveReport';
    model_id?: string | null;
    message: string;
  };
};
export declare const QuestionPartsFragmentDoc: Apollo.DocumentNode;
export declare const ProductPartsFragmentDoc: Apollo.DocumentNode;
export declare const PaginatorPartsFragmentDoc: Apollo.DocumentNode;
export declare const AuthorPartsFragmentDoc: Apollo.DocumentNode;
export declare const AbusiveReportPartsFragmentDoc: Apollo.DocumentNode;
export declare const ProductsDocument: Apollo.DocumentNode;
/**
 * __useProductsQuery__
 *
 * To run a query within a React component, call `useProductsQuery` and pass it any options that fit your needs.
 * When your component renders, `useProductsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useProductsQuery({
 *   variables: {
 *      search: // value for 'search'
 *      date_range: // value for 'date_range'
 *      orderBy: // value for 'orderBy'
 *      sortedBy: // value for 'sortedBy'
 *      language: // value for 'language'
 *      searchJoin: // value for 'searchJoin'
 *      first: // value for 'first'
 *      page: // value for 'page'
 *   },
 * });
 */

export declare function useProductsQuery(baseOptions?: Apollo.QueryHookOptions<ProductsQuery, ProductsQueryVariables>): Apollo.QueryResult<ProductsQuery, Types.Exact<{
  search?: Types.InputMaybe<string> | undefined;
  date_range?: Types.InputMaybe<string> | undefined;
  orderBy?: Types.InputMaybe<string> | undefined;
  sortedBy?: Types.InputMaybe<string> | undefined;
  language?: Types.InputMaybe<string> | undefined;
  searchJoin?: Types.InputMaybe<string> | undefined;
  first?: Types.InputMaybe<number> | undefined;
  page?: Types.InputMaybe<number> | undefined;
}>>;
export declare function useProductsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<ProductsQuery, ProductsQueryVariables>): Apollo.QueryTuple<ProductsQuery, Types.Exact<{
  search?: Types.InputMaybe<string> | undefined;
  date_range?: Types.InputMaybe<string> | undefined;
  orderBy?: Types.InputMaybe<string> | undefined;
  sortedBy?: Types.InputMaybe<string> | undefined;
  language?: Types.InputMaybe<string> | undefined;
  searchJoin?: Types.InputMaybe<string> | undefined;
  first?: Types.InputMaybe<number> | undefined;
  page?: Types.InputMaybe<number> | undefined;
}>>;
export declare type ProductsQueryHookResult = ReturnType<typeof useProductsQuery>;
export declare type ProductsLazyQueryHookResult = ReturnType<typeof useProductsLazyQuery>;
export declare type ProductsQueryResult = Apollo.QueryResult<ProductsQuery, ProductsQueryVariables>;
export declare const ProductDocument: Apollo.DocumentNode;
/**
 * __useProductQuery__
 *
 * To run a query within a React component, call `useProductQuery` and pass it any options that fit your needs.
 * When your component renders, `useProductQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useProductQuery({
 *   variables: {
 *      id: // value for 'id'
 *      slug: // value for 'slug'
 *      language: // value for 'language'
 *   },
 * });
 */

export declare function useProductQuery(baseOptions?: Apollo.QueryHookOptions<ProductQuery, ProductQueryVariables>): Apollo.QueryResult<ProductQuery, Types.Exact<{
  id?: Types.InputMaybe<string> | undefined;
  slug?: Types.InputMaybe<string> | undefined;
  language?: Types.InputMaybe<string> | undefined;
}>>;
export declare function useProductLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<ProductQuery, ProductQueryVariables>): Apollo.QueryTuple<ProductQuery, Types.Exact<{
  id?: Types.InputMaybe<string> | undefined;
  slug?: Types.InputMaybe<string> | undefined;
  language?: Types.InputMaybe<string> | undefined;
}>>;
export declare type ProductQueryHookResult = ReturnType<typeof useProductQuery>;
export declare type ProductLazyQueryHookResult = ReturnType<typeof useProductLazyQuery>;
export declare type ProductQueryResult = Apollo.QueryResult<ProductQuery, ProductQueryVariables>;
export declare const PopularProductsDocument: Apollo.DocumentNode;
/**
 * __usePopularProductsQuery__
 *
 * To run a query within a React component, call `usePopularProductsQuery` and pass it any options that fit your needs.
 * When your component renders, `usePopularProductsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = usePopularProductsQuery({
 *   variables: {
 *      limit: // value for 'limit'
 *      type_slug: // value for 'type_slug'
 *      range: // value for 'range'
 *   },
 * });
 */

export declare function usePopularProductsQuery(baseOptions?: Apollo.QueryHookOptions<PopularProductsQuery, PopularProductsQueryVariables>): Apollo.QueryResult<PopularProductsQuery, Types.Exact<{
  limit?: Types.InputMaybe<number> | undefined;
  type_slug?: Types.InputMaybe<string> | undefined;
  range?: Types.InputMaybe<number> | undefined;
}>>;
export declare function usePopularProductsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<PopularProductsQuery, PopularProductsQueryVariables>): Apollo.QueryTuple<PopularProductsQuery, Types.Exact<{
  limit?: Types.InputMaybe<number> | undefined;
  type_slug?: Types.InputMaybe<string> | undefined;
  range?: Types.InputMaybe<number> | undefined;
}>>;
export declare type PopularProductsQueryHookResult = ReturnType<typeof usePopularProductsQuery>;
export declare type PopularProductsLazyQueryHookResult = ReturnType<typeof usePopularProductsLazyQuery>;
export declare type PopularProductsQueryResult = Apollo.QueryResult<PopularProductsQuery, PopularProductsQueryVariables>;
export declare const DownloadableProductsDocument: Apollo.DocumentNode;
/**
 * __useDownloadableProductsQuery__
 *
 * To run a query within a React component, call `useDownloadableProductsQuery` and pass it any options that fit your needs.
 * When your component renders, `useDownloadableProductsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useDownloadableProductsQuery({
 *   variables: {
 *      first: // value for 'first'
 *      page: // value for 'page'
 *   },
 * });
 */

export declare function useDownloadableProductsQuery(baseOptions?: Apollo.QueryHookOptions<DownloadableProductsQuery, DownloadableProductsQueryVariables>): Apollo.QueryResult<DownloadableProductsQuery, Types.Exact<{
  first?: Types.InputMaybe<number> | undefined;
  page?: Types.InputMaybe<number> | undefined;
}>>;
export declare function useDownloadableProductsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<DownloadableProductsQuery, DownloadableProductsQueryVariables>): Apollo.QueryTuple<DownloadableProductsQuery, Types.Exact<{
  first?: Types.InputMaybe<number> | undefined;
  page?: Types.InputMaybe<number> | undefined;
}>>;
export declare type DownloadableProductsQueryHookResult = ReturnType<typeof useDownloadableProductsQuery>;
export declare type DownloadableProductsLazyQueryHookResult = ReturnType<typeof useDownloadableProductsLazyQuery>;
export declare type DownloadableProductsQueryResult = Apollo.QueryResult<DownloadableProductsQuery, DownloadableProductsQueryVariables>;
export declare const QuestionsDocument: Apollo.DocumentNode;
/**
 * __useQuestionsQuery__
 *
 * To run a query within a React component, call `useQuestionsQuery` and pass it any options that fit your needs.
 * When your component renders, `useQuestionsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useQuestionsQuery({
 *   variables: {
 *      product_id: // value for 'product_id'
 *      shop_id: // value for 'shop_id'
 *      question: // value for 'question'
 *      orderBy: // value for 'orderBy'
 *      first: // value for 'first'
 *      page: // value for 'page'
 *   },
 * });
 */

export declare function useQuestionsQuery(baseOptions?: Apollo.QueryHookOptions<QuestionsQuery, QuestionsQueryVariables>): Apollo.QueryResult<QuestionsQuery, Types.Exact<{
  product_id?: Types.InputMaybe<string> | undefined;
  shop_id?: Types.InputMaybe<string> | undefined;
  question?: Types.InputMaybe<string> | undefined;
  orderBy?: Types.InputMaybe<Types.QueryQuestionsOrderByOrderByClause | Types.QueryQuestionsOrderByOrderByClause[]> | undefined;
  first?: Types.InputMaybe<number> | undefined;
  page?: Types.InputMaybe<number> | undefined;
}>>;
export declare function useQuestionsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<QuestionsQuery, QuestionsQueryVariables>): Apollo.QueryTuple<QuestionsQuery, Types.Exact<{
  product_id?: Types.InputMaybe<string> | undefined;
  shop_id?: Types.InputMaybe<string> | undefined;
  question?: Types.InputMaybe<string> | undefined;
  orderBy?: Types.InputMaybe<Types.QueryQuestionsOrderByOrderByClause | Types.QueryQuestionsOrderByOrderByClause[]> | undefined;
  first?: Types.InputMaybe<number> | undefined;
  page?: Types.InputMaybe<number> | undefined;
}>>;
export declare type QuestionsQueryHookResult = ReturnType<typeof useQuestionsQuery>;
export declare type QuestionsLazyQueryHookResult = ReturnType<typeof useQuestionsLazyQuery>;
export declare type QuestionsQueryResult = Apollo.QueryResult<QuestionsQuery, QuestionsQueryVariables>;
export declare const MyQuestionsDocument: Apollo.DocumentNode;
/**
 * __useMyQuestionsQuery__
 *
 * To run a query within a React component, call `useMyQuestionsQuery` and pass it any options that fit your needs.
 * When your component renders, `useMyQuestionsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useMyQuestionsQuery({
 *   variables: {
 *      orderBy: // value for 'orderBy'
 *      first: // value for 'first'
 *      page: // value for 'page'
 *   },
 * });
 */

export declare function useMyQuestionsQuery(baseOptions?: Apollo.QueryHookOptions<MyQuestionsQuery, MyQuestionsQueryVariables>): Apollo.QueryResult<MyQuestionsQuery, Types.Exact<{
  orderBy?: Types.InputMaybe<Types.QueryMyQuestionsOrderByOrderByClause | Types.QueryMyQuestionsOrderByOrderByClause[]> | undefined;
  first?: Types.InputMaybe<number> | undefined;
  page?: Types.InputMaybe<number> | undefined;
}>>;
export declare function useMyQuestionsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<MyQuestionsQuery, MyQuestionsQueryVariables>): Apollo.QueryTuple<MyQuestionsQuery, Types.Exact<{
  orderBy?: Types.InputMaybe<Types.QueryMyQuestionsOrderByOrderByClause | Types.QueryMyQuestionsOrderByOrderByClause[]> | undefined;
  first?: Types.InputMaybe<number> | undefined;
  page?: Types.InputMaybe<number> | undefined;
}>>;
export declare type MyQuestionsQueryHookResult = ReturnType<typeof useMyQuestionsQuery>;
export declare type MyQuestionsLazyQueryHookResult = ReturnType<typeof useMyQuestionsLazyQuery>;
export declare type MyQuestionsQueryResult = Apollo.QueryResult<MyQuestionsQuery, MyQuestionsQueryVariables>;
export declare const MyReportsDocument: Apollo.DocumentNode;
/**
 * __useMyReportsQuery__
 *
 * To run a query within a React component, call `useMyReportsQuery` and pass it any options that fit your needs.
 * When your component renders, `useMyReportsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useMyReportsQuery({
 *   variables: {
 *      orderBy: // value for 'orderBy'
 *      first: // value for 'first'
 *      page: // value for 'page'
 *   },
 * });
 */

export declare function useMyReportsQuery(baseOptions?: Apollo.QueryHookOptions<MyReportsQuery, MyReportsQueryVariables>): Apollo.QueryResult<MyReportsQuery, Types.Exact<{
  orderBy?: Types.InputMaybe<Types.QueryMyReportsOrderByOrderByClause | Types.QueryMyReportsOrderByOrderByClause[]> | undefined;
  first?: Types.InputMaybe<number> | undefined;
  page?: Types.InputMaybe<number> | undefined;
}>>;
export declare function useMyReportsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<MyReportsQuery, MyReportsQueryVariables>): Apollo.QueryTuple<MyReportsQuery, Types.Exact<{
  orderBy?: Types.InputMaybe<Types.QueryMyReportsOrderByOrderByClause | Types.QueryMyReportsOrderByOrderByClause[]> | undefined;
  first?: Types.InputMaybe<number> | undefined;
  page?: Types.InputMaybe<number> | undefined;
}>>;
export declare type MyReportsQueryHookResult = ReturnType<typeof useMyReportsQuery>;
export declare type MyReportsLazyQueryHookResult = ReturnType<typeof useMyReportsLazyQuery>;
export declare type MyReportsQueryResult = Apollo.QueryResult<MyReportsQuery, MyReportsQueryVariables>;
export declare const GenerateDownloadableUrlDocument: Apollo.DocumentNode;
export declare type GenerateDownloadableUrlMutationFn = Apollo.MutationFunction<GenerateDownloadableUrlMutation, GenerateDownloadableUrlMutationVariables>;
/**
 * __useGenerateDownloadableUrlMutation__
 *
 * To run a mutation, you first call `useGenerateDownloadableUrlMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useGenerateDownloadableUrlMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [generateDownloadableUrlMutation, { data, loading, error }] = useGenerateDownloadableUrlMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */

export declare function useGenerateDownloadableUrlMutation(baseOptions?: Apollo.MutationHookOptions<GenerateDownloadableUrlMutation, GenerateDownloadableUrlMutationVariables>): Apollo.MutationTuple<GenerateDownloadableUrlMutation, Types.Exact<{
  input: Types.GenerateDownloadableUrlInput;
}>, Apollo.DefaultContext, Apollo.ApolloCache<any>>;
export declare type GenerateDownloadableUrlMutationHookResult = ReturnType<typeof useGenerateDownloadableUrlMutation>;
export declare type GenerateDownloadableUrlMutationResult = Apollo.MutationResult<GenerateDownloadableUrlMutation>;
export declare type GenerateDownloadableUrlMutationOptions = Apollo.BaseMutationOptions<GenerateDownloadableUrlMutation, GenerateDownloadableUrlMutationVariables>;
export declare const CreateQuestionDocument: Apollo.DocumentNode;
export declare type CreateQuestionMutationFn = Apollo.MutationFunction<CreateQuestionMutation, CreateQuestionMutationVariables>;
/**
 * __useCreateQuestionMutation__
 *
 * To run a mutation, you first call `useCreateQuestionMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateQuestionMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createQuestionMutation, { data, loading, error }] = useCreateQuestionMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */

export declare function useCreateQuestionMutation(baseOptions?: Apollo.MutationHookOptions<CreateQuestionMutation, CreateQuestionMutationVariables>): Apollo.MutationTuple<CreateQuestionMutation, Types.Exact<{
  input: Types.CreateQuestionInput;
}>, Apollo.DefaultContext, Apollo.ApolloCache<any>>;
export declare type CreateQuestionMutationHookResult = ReturnType<typeof useCreateQuestionMutation>;
export declare type CreateQuestionMutationResult = Apollo.MutationResult<CreateQuestionMutation>;
export declare type CreateQuestionMutationOptions = Apollo.BaseMutationOptions<CreateQuestionMutation, CreateQuestionMutationVariables>;
export declare const CreateFeedbackDocument: Apollo.DocumentNode;
export declare type CreateFeedbackMutationFn = Apollo.MutationFunction<CreateFeedbackMutation, CreateFeedbackMutationVariables>;
/**
 * __useCreateFeedbackMutation__
 *
 * To run a mutation, you first call `useCreateFeedbackMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateFeedbackMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createFeedbackMutation, { data, loading, error }] = useCreateFeedbackMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */

export declare function useCreateFeedbackMutation(baseOptions?: Apollo.MutationHookOptions<CreateFeedbackMutation, CreateFeedbackMutationVariables>): Apollo.MutationTuple<CreateFeedbackMutation, Types.Exact<{
  input: Types.CreateFeedbackInput;
}>, Apollo.DefaultContext, Apollo.ApolloCache<any>>;
export declare type CreateFeedbackMutationHookResult = ReturnType<typeof useCreateFeedbackMutation>;
export declare type CreateFeedbackMutationResult = Apollo.MutationResult<CreateFeedbackMutation>;
export declare type CreateFeedbackMutationOptions = Apollo.BaseMutationOptions<CreateFeedbackMutation, CreateFeedbackMutationVariables>;
export declare const CreateAbuseReportDocument: Apollo.DocumentNode;
export declare type CreateAbuseReportMutationFn = Apollo.MutationFunction<CreateAbuseReportMutation, CreateAbuseReportMutationVariables>;
/**
 * __useCreateAbuseReportMutation__
 *
 * To run a mutation, you first call `useCreateAbuseReportMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateAbuseReportMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createAbuseReportMutation, { data, loading, error }] = useCreateAbuseReportMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */

export declare function useCreateAbuseReportMutation(baseOptions?: Apollo.MutationHookOptions<CreateAbuseReportMutation, CreateAbuseReportMutationVariables>): Apollo.MutationTuple<CreateAbuseReportMutation, Types.Exact<{
  input: Types.CreateAbusiveReportInput;
}>, Apollo.DefaultContext, Apollo.ApolloCache<any>>;
export declare type CreateAbuseReportMutationHookResult = ReturnType<typeof useCreateAbuseReportMutation>;
export declare type CreateAbuseReportMutationResult = Apollo.MutationResult<CreateAbuseReportMutation>;
export declare type CreateAbuseReportMutationOptions = Apollo.BaseMutationOptions<CreateAbuseReportMutation, CreateAbuseReportMutationVariables>;