/* c20cbb6e07afb5396d950ef685dc80d450df0567
 * This file is automatically generated by graphql-let. */

import * as Types from "graphql-let/__generated__/__types__";
import * as Apollo from '@apollo/client';
export declare type LoginMutationVariables = Types.Exact<{
  input: Types.LoginInput;
}>;
export declare type LoginMutation = {
  __typename?: 'Mutation';
  login: {
    __typename?: 'AuthResponse';
    token: string;
    permissions: Array<string>;
  };
};
export declare type SocialLoginMutationVariables = Types.Exact<{
  input: Types.SocialLoginInput;
}>;
export declare type SocialLoginMutation = {
  __typename?: 'Mutation';
  socialLogin: {
    __typename?: 'AuthResponse';
    token: string;
    permissions: Array<string>;
  };
};
export declare type SendOtpCodeMutationVariables = Types.Exact<{
  input: Types.OtpInput;
}>;
export declare type SendOtpCodeMutation = {
  __typename?: 'Mutation';
  sendOtpCode: {
    __typename?: 'OtpResponse';
    id: string;
    message: string;
    success: boolean;
    provider: string;
    phone_number: string;
    is_contact_exist: boolean;
  };
};
export declare type VerifyOtpCodeMutationVariables = Types.Exact<{
  input: Types.VerifyOtpInput;
}>;
export declare type VerifyOtpCodeMutation = {
  __typename?: 'Mutation';
  verifyOtpCode: {
    __typename?: 'SuccessResponse';
    message: string;
    success: boolean;
  };
};
export declare type OtpLoginMutationVariables = Types.Exact<{
  input: Types.OtpLoginInput;
}>;
export declare type OtpLoginMutation = {
  __typename?: 'Mutation';
  otpLogin: {
    __typename?: 'AuthResponse';
    token: string;
    permissions: Array<string>;
  };
};
export declare type LogoutMutationVariables = Types.Exact<{
  [key: string]: never;
}>;
export declare type LogoutMutation = {
  __typename?: 'Mutation';
  logout: boolean;
};
export declare type RegisterMutationVariables = Types.Exact<{
  input: Types.RegisterInput;
}>;
export declare type RegisterMutation = {
  __typename?: 'Mutation';
  register: {
    __typename?: 'AuthResponse';
    token: string;
    permissions: Array<string>;
  };
};
export declare type ChangePasswordMutationVariables = Types.Exact<{
  input: Types.ChangePasswordInput;
}>;
export declare type ChangePasswordMutation = {
  __typename?: 'Mutation';
  changePassword: {
    __typename?: 'PasswordChangeResponse';
    message: string;
    success: boolean;
  };
};
export declare type ForgetPasswordMutationVariables = Types.Exact<{
  input: Types.ForgetPasswordInput;
}>;
export declare type ForgetPasswordMutation = {
  __typename?: 'Mutation';
  forgetPassword: {
    __typename?: 'PasswordChangeResponse';
    message: string;
    success: boolean;
  };
};
export declare type VerifyForgetPasswordTokenMutationVariables = Types.Exact<{
  input: Types.VerifyForgetPasswordTokenInput;
}>;
export declare type VerifyForgetPasswordTokenMutation = {
  __typename?: 'Mutation';
  verifyForgetPasswordToken: {
    __typename?: 'PasswordChangeResponse';
    message: string;
    success: boolean;
  };
};
export declare type ResetPasswordMutationVariables = Types.Exact<{
  input: Types.ResetPasswordInput;
}>;
export declare type ResetPasswordMutation = {
  __typename?: 'Mutation';
  resetPassword: {
    __typename?: 'PasswordChangeResponse';
    message: string;
    success: boolean;
  };
};
export declare type UpdateCustomerMutationVariables = Types.Exact<{
  input: Types.UpdateUserInput;
}>;
export declare type UpdateCustomerMutation = {
  __typename?: 'Mutation';
  updateUser: {
    __typename?: 'User';
    id: string;
    name: string;
    email: string;
    profile?: {
      __typename?: 'Profile';
      id: string;
      bio?: string | null;
      contact?: string | null;
      avatar?: {
        __typename?: 'Attachment';
        id?: string | null;
        thumbnail?: string | null;
        original?: string | null;
      } | null;
      socials?: Array<{
        __typename?: 'Social';
        type: string;
        link: string;
      }> | null;
    } | null;
    address?: Array<{
      __typename?: 'Address';
      title: string;
      default: boolean;
      type: Types.AddressType;
      address: {
        __typename?: 'UserAddress';
        country?: string | null;
        city?: string | null;
        state?: string | null;
        zip?: string | null;
      };
    }> | null;
  };
};
export declare type CustomerQueryVariables = Types.Exact<{
  [key: string]: never;
}>;
export declare type CustomerQuery = {
  __typename?: 'Query';
  me: {
    __typename?: 'User';
    id: string;
    name: string;
    email: string;
    profile?: {
      __typename?: 'Profile';
      id: string;
      bio?: string | null;
      contact?: string | null;
      avatar?: {
        __typename?: 'Attachment';
        id?: string | null;
        thumbnail?: string | null;
        original?: string | null;
      } | null;
      socials?: Array<{
        __typename?: 'Social';
        type: string;
        link: string;
      }> | null;
    } | null;
    address?: Array<{
      __typename?: 'Address';
      id: string;
      title: string;
      default: boolean;
      type: Types.AddressType;
      address: {
        __typename?: 'UserAddress';
        country?: string | null;
        city?: string | null;
        state?: string | null;
        zip?: string | null;
        street_address?: string | null;
      };
    }> | null;
    wallet?: {
      __typename?: 'Wallet';
      id: string;
      total_points: number;
      points_used: number;
      available_points: number;
    } | null;
  };
};
export declare const LoginDocument: Apollo.DocumentNode;
export declare type LoginMutationFn = Apollo.MutationFunction<LoginMutation, LoginMutationVariables>;
/**
 * __useLoginMutation__
 *
 * To run a mutation, you first call `useLoginMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useLoginMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [loginMutation, { data, loading, error }] = useLoginMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */

export declare function useLoginMutation(baseOptions?: Apollo.MutationHookOptions<LoginMutation, LoginMutationVariables>): Apollo.MutationTuple<LoginMutation, Types.Exact<{
  input: Types.LoginInput;
}>, Apollo.DefaultContext, Apollo.ApolloCache<any>>;
export declare type LoginMutationHookResult = ReturnType<typeof useLoginMutation>;
export declare type LoginMutationResult = Apollo.MutationResult<LoginMutation>;
export declare type LoginMutationOptions = Apollo.BaseMutationOptions<LoginMutation, LoginMutationVariables>;
export declare const SocialLoginDocument: Apollo.DocumentNode;
export declare type SocialLoginMutationFn = Apollo.MutationFunction<SocialLoginMutation, SocialLoginMutationVariables>;
/**
 * __useSocialLoginMutation__
 *
 * To run a mutation, you first call `useSocialLoginMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useSocialLoginMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [socialLoginMutation, { data, loading, error }] = useSocialLoginMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */

export declare function useSocialLoginMutation(baseOptions?: Apollo.MutationHookOptions<SocialLoginMutation, SocialLoginMutationVariables>): Apollo.MutationTuple<SocialLoginMutation, Types.Exact<{
  input: Types.SocialLoginInput;
}>, Apollo.DefaultContext, Apollo.ApolloCache<any>>;
export declare type SocialLoginMutationHookResult = ReturnType<typeof useSocialLoginMutation>;
export declare type SocialLoginMutationResult = Apollo.MutationResult<SocialLoginMutation>;
export declare type SocialLoginMutationOptions = Apollo.BaseMutationOptions<SocialLoginMutation, SocialLoginMutationVariables>;
export declare const SendOtpCodeDocument: Apollo.DocumentNode;
export declare type SendOtpCodeMutationFn = Apollo.MutationFunction<SendOtpCodeMutation, SendOtpCodeMutationVariables>;
/**
 * __useSendOtpCodeMutation__
 *
 * To run a mutation, you first call `useSendOtpCodeMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useSendOtpCodeMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [sendOtpCodeMutation, { data, loading, error }] = useSendOtpCodeMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */

export declare function useSendOtpCodeMutation(baseOptions?: Apollo.MutationHookOptions<SendOtpCodeMutation, SendOtpCodeMutationVariables>): Apollo.MutationTuple<SendOtpCodeMutation, Types.Exact<{
  input: Types.OtpInput;
}>, Apollo.DefaultContext, Apollo.ApolloCache<any>>;
export declare type SendOtpCodeMutationHookResult = ReturnType<typeof useSendOtpCodeMutation>;
export declare type SendOtpCodeMutationResult = Apollo.MutationResult<SendOtpCodeMutation>;
export declare type SendOtpCodeMutationOptions = Apollo.BaseMutationOptions<SendOtpCodeMutation, SendOtpCodeMutationVariables>;
export declare const VerifyOtpCodeDocument: Apollo.DocumentNode;
export declare type VerifyOtpCodeMutationFn = Apollo.MutationFunction<VerifyOtpCodeMutation, VerifyOtpCodeMutationVariables>;
/**
 * __useVerifyOtpCodeMutation__
 *
 * To run a mutation, you first call `useVerifyOtpCodeMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useVerifyOtpCodeMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [verifyOtpCodeMutation, { data, loading, error }] = useVerifyOtpCodeMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */

export declare function useVerifyOtpCodeMutation(baseOptions?: Apollo.MutationHookOptions<VerifyOtpCodeMutation, VerifyOtpCodeMutationVariables>): Apollo.MutationTuple<VerifyOtpCodeMutation, Types.Exact<{
  input: Types.VerifyOtpInput;
}>, Apollo.DefaultContext, Apollo.ApolloCache<any>>;
export declare type VerifyOtpCodeMutationHookResult = ReturnType<typeof useVerifyOtpCodeMutation>;
export declare type VerifyOtpCodeMutationResult = Apollo.MutationResult<VerifyOtpCodeMutation>;
export declare type VerifyOtpCodeMutationOptions = Apollo.BaseMutationOptions<VerifyOtpCodeMutation, VerifyOtpCodeMutationVariables>;
export declare const OtpLoginDocument: Apollo.DocumentNode;
export declare type OtpLoginMutationFn = Apollo.MutationFunction<OtpLoginMutation, OtpLoginMutationVariables>;
/**
 * __useOtpLoginMutation__
 *
 * To run a mutation, you first call `useOtpLoginMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useOtpLoginMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [otpLoginMutation, { data, loading, error }] = useOtpLoginMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */

export declare function useOtpLoginMutation(baseOptions?: Apollo.MutationHookOptions<OtpLoginMutation, OtpLoginMutationVariables>): Apollo.MutationTuple<OtpLoginMutation, Types.Exact<{
  input: Types.OtpLoginInput;
}>, Apollo.DefaultContext, Apollo.ApolloCache<any>>;
export declare type OtpLoginMutationHookResult = ReturnType<typeof useOtpLoginMutation>;
export declare type OtpLoginMutationResult = Apollo.MutationResult<OtpLoginMutation>;
export declare type OtpLoginMutationOptions = Apollo.BaseMutationOptions<OtpLoginMutation, OtpLoginMutationVariables>;
export declare const LogoutDocument: Apollo.DocumentNode;
export declare type LogoutMutationFn = Apollo.MutationFunction<LogoutMutation, LogoutMutationVariables>;
/**
 * __useLogoutMutation__
 *
 * To run a mutation, you first call `useLogoutMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useLogoutMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [logoutMutation, { data, loading, error }] = useLogoutMutation({
 *   variables: {
 *   },
 * });
 */

export declare function useLogoutMutation(baseOptions?: Apollo.MutationHookOptions<LogoutMutation, LogoutMutationVariables>): Apollo.MutationTuple<LogoutMutation, Types.Exact<{
  [key: string]: never;
}>, Apollo.DefaultContext, Apollo.ApolloCache<any>>;
export declare type LogoutMutationHookResult = ReturnType<typeof useLogoutMutation>;
export declare type LogoutMutationResult = Apollo.MutationResult<LogoutMutation>;
export declare type LogoutMutationOptions = Apollo.BaseMutationOptions<LogoutMutation, LogoutMutationVariables>;
export declare const RegisterDocument: Apollo.DocumentNode;
export declare type RegisterMutationFn = Apollo.MutationFunction<RegisterMutation, RegisterMutationVariables>;
/**
 * __useRegisterMutation__
 *
 * To run a mutation, you first call `useRegisterMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useRegisterMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [registerMutation, { data, loading, error }] = useRegisterMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */

export declare function useRegisterMutation(baseOptions?: Apollo.MutationHookOptions<RegisterMutation, RegisterMutationVariables>): Apollo.MutationTuple<RegisterMutation, Types.Exact<{
  input: Types.RegisterInput;
}>, Apollo.DefaultContext, Apollo.ApolloCache<any>>;
export declare type RegisterMutationHookResult = ReturnType<typeof useRegisterMutation>;
export declare type RegisterMutationResult = Apollo.MutationResult<RegisterMutation>;
export declare type RegisterMutationOptions = Apollo.BaseMutationOptions<RegisterMutation, RegisterMutationVariables>;
export declare const ChangePasswordDocument: Apollo.DocumentNode;
export declare type ChangePasswordMutationFn = Apollo.MutationFunction<ChangePasswordMutation, ChangePasswordMutationVariables>;
/**
 * __useChangePasswordMutation__
 *
 * To run a mutation, you first call `useChangePasswordMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useChangePasswordMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [changePasswordMutation, { data, loading, error }] = useChangePasswordMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */

export declare function useChangePasswordMutation(baseOptions?: Apollo.MutationHookOptions<ChangePasswordMutation, ChangePasswordMutationVariables>): Apollo.MutationTuple<ChangePasswordMutation, Types.Exact<{
  input: Types.ChangePasswordInput;
}>, Apollo.DefaultContext, Apollo.ApolloCache<any>>;
export declare type ChangePasswordMutationHookResult = ReturnType<typeof useChangePasswordMutation>;
export declare type ChangePasswordMutationResult = Apollo.MutationResult<ChangePasswordMutation>;
export declare type ChangePasswordMutationOptions = Apollo.BaseMutationOptions<ChangePasswordMutation, ChangePasswordMutationVariables>;
export declare const ForgetPasswordDocument: Apollo.DocumentNode;
export declare type ForgetPasswordMutationFn = Apollo.MutationFunction<ForgetPasswordMutation, ForgetPasswordMutationVariables>;
/**
 * __useForgetPasswordMutation__
 *
 * To run a mutation, you first call `useForgetPasswordMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useForgetPasswordMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [forgetPasswordMutation, { data, loading, error }] = useForgetPasswordMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */

export declare function useForgetPasswordMutation(baseOptions?: Apollo.MutationHookOptions<ForgetPasswordMutation, ForgetPasswordMutationVariables>): Apollo.MutationTuple<ForgetPasswordMutation, Types.Exact<{
  input: Types.ForgetPasswordInput;
}>, Apollo.DefaultContext, Apollo.ApolloCache<any>>;
export declare type ForgetPasswordMutationHookResult = ReturnType<typeof useForgetPasswordMutation>;
export declare type ForgetPasswordMutationResult = Apollo.MutationResult<ForgetPasswordMutation>;
export declare type ForgetPasswordMutationOptions = Apollo.BaseMutationOptions<ForgetPasswordMutation, ForgetPasswordMutationVariables>;
export declare const VerifyForgetPasswordTokenDocument: Apollo.DocumentNode;
export declare type VerifyForgetPasswordTokenMutationFn = Apollo.MutationFunction<VerifyForgetPasswordTokenMutation, VerifyForgetPasswordTokenMutationVariables>;
/**
 * __useVerifyForgetPasswordTokenMutation__
 *
 * To run a mutation, you first call `useVerifyForgetPasswordTokenMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useVerifyForgetPasswordTokenMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [verifyForgetPasswordTokenMutation, { data, loading, error }] = useVerifyForgetPasswordTokenMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */

export declare function useVerifyForgetPasswordTokenMutation(baseOptions?: Apollo.MutationHookOptions<VerifyForgetPasswordTokenMutation, VerifyForgetPasswordTokenMutationVariables>): Apollo.MutationTuple<VerifyForgetPasswordTokenMutation, Types.Exact<{
  input: Types.VerifyForgetPasswordTokenInput;
}>, Apollo.DefaultContext, Apollo.ApolloCache<any>>;
export declare type VerifyForgetPasswordTokenMutationHookResult = ReturnType<typeof useVerifyForgetPasswordTokenMutation>;
export declare type VerifyForgetPasswordTokenMutationResult = Apollo.MutationResult<VerifyForgetPasswordTokenMutation>;
export declare type VerifyForgetPasswordTokenMutationOptions = Apollo.BaseMutationOptions<VerifyForgetPasswordTokenMutation, VerifyForgetPasswordTokenMutationVariables>;
export declare const ResetPasswordDocument: Apollo.DocumentNode;
export declare type ResetPasswordMutationFn = Apollo.MutationFunction<ResetPasswordMutation, ResetPasswordMutationVariables>;
/**
 * __useResetPasswordMutation__
 *
 * To run a mutation, you first call `useResetPasswordMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useResetPasswordMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [resetPasswordMutation, { data, loading, error }] = useResetPasswordMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */

export declare function useResetPasswordMutation(baseOptions?: Apollo.MutationHookOptions<ResetPasswordMutation, ResetPasswordMutationVariables>): Apollo.MutationTuple<ResetPasswordMutation, Types.Exact<{
  input: Types.ResetPasswordInput;
}>, Apollo.DefaultContext, Apollo.ApolloCache<any>>;
export declare type ResetPasswordMutationHookResult = ReturnType<typeof useResetPasswordMutation>;
export declare type ResetPasswordMutationResult = Apollo.MutationResult<ResetPasswordMutation>;
export declare type ResetPasswordMutationOptions = Apollo.BaseMutationOptions<ResetPasswordMutation, ResetPasswordMutationVariables>;
export declare const UpdateCustomerDocument: Apollo.DocumentNode;
export declare type UpdateCustomerMutationFn = Apollo.MutationFunction<UpdateCustomerMutation, UpdateCustomerMutationVariables>;
/**
 * __useUpdateCustomerMutation__
 *
 * To run a mutation, you first call `useUpdateCustomerMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateCustomerMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateCustomerMutation, { data, loading, error }] = useUpdateCustomerMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */

export declare function useUpdateCustomerMutation(baseOptions?: Apollo.MutationHookOptions<UpdateCustomerMutation, UpdateCustomerMutationVariables>): Apollo.MutationTuple<UpdateCustomerMutation, Types.Exact<{
  input: Types.UpdateUserInput;
}>, Apollo.DefaultContext, Apollo.ApolloCache<any>>;
export declare type UpdateCustomerMutationHookResult = ReturnType<typeof useUpdateCustomerMutation>;
export declare type UpdateCustomerMutationResult = Apollo.MutationResult<UpdateCustomerMutation>;
export declare type UpdateCustomerMutationOptions = Apollo.BaseMutationOptions<UpdateCustomerMutation, UpdateCustomerMutationVariables>;
export declare const CustomerDocument: Apollo.DocumentNode;
/**
 * __useCustomerQuery__
 *
 * To run a query within a React component, call `useCustomerQuery` and pass it any options that fit your needs.
 * When your component renders, `useCustomerQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCustomerQuery({
 *   variables: {
 *   },
 * });
 */

export declare function useCustomerQuery(baseOptions?: Apollo.QueryHookOptions<CustomerQuery, CustomerQueryVariables>): Apollo.QueryResult<CustomerQuery, Types.Exact<{
  [key: string]: never;
}>>;
export declare function useCustomerLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<CustomerQuery, CustomerQueryVariables>): Apollo.QueryTuple<CustomerQuery, Types.Exact<{
  [key: string]: never;
}>>;
export declare type CustomerQueryHookResult = ReturnType<typeof useCustomerQuery>;
export declare type CustomerLazyQueryHookResult = ReturnType<typeof useCustomerLazyQuery>;
export declare type CustomerQueryResult = Apollo.QueryResult<CustomerQuery, CustomerQueryVariables>;