/* 4214556d4877c9273ff51196becf693d36f2f249
 * This file is automatically generated by graphql-let. */

import * as Types from "graphql-let/__generated__/__types__";
import * as Apollo from '@apollo/client';
export declare type AuthorsQueryVariables = Types.Exact<{
  text?: Types.InputMaybe<Types.Scalars['String']>;
  is_approved?: Types.InputMaybe<Types.Scalars['Boolean']>;
  orderBy?: Types.InputMaybe<Array<Types.QueryAuthorsOrderByOrderByClause> | Types.QueryAuthorsOrderByOrderByClause>;
  first?: Types.InputMaybe<Types.Scalars['Int']>;
  page?: Types.InputMaybe<Types.Scalars['Int']>;
  language?: Types.InputMaybe<Types.Scalars['String']>;
}>;
export declare type AuthorsQuery = {
  __typename?: 'Query';
  authors: {
    __typename?: 'AuthorPaginator';
    data: Array<{
      __typename?: 'Author';
      id: string;
      name: string;
      is_approved?: boolean | null;
      slug?: string | null;
      bio?: string | null;
      quote?: string | null;
      born?: string | null;
      death?: string | null;
      languages?: string | null;
      socials?: Array<{
        __typename?: 'ShopSocials';
        url: string;
        icon: string;
      }> | null;
      image?: {
        __typename?: 'Attachment';
        id?: string | null;
        original?: string | null;
        thumbnail?: string | null;
      } | null;
      cover_image?: {
        __typename?: 'Attachment';
        id?: string | null;
        original?: string | null;
        thumbnail?: string | null;
      } | null;
    }>;
    paginatorInfo: {
      __typename?: 'PaginatorInfo';
      count: number;
      currentPage: number;
      firstItem: number;
      hasMorePages: boolean;
      lastItem: number;
      lastPage: number;
      perPage: number;
      total: number;
    };
  };
};
export declare type AuthorPartsFragment = {
  __typename?: 'Author';
  id: string;
  name: string;
  is_approved?: boolean | null;
  slug?: string | null;
  bio?: string | null;
  quote?: string | null;
  born?: string | null;
  death?: string | null;
  languages?: string | null;
  socials?: Array<{
    __typename?: 'ShopSocials';
    url: string;
    icon: string;
  }> | null;
  image?: {
    __typename?: 'Attachment';
    id?: string | null;
    original?: string | null;
    thumbnail?: string | null;
  } | null;
  cover_image?: {
    __typename?: 'Attachment';
    id?: string | null;
    original?: string | null;
    thumbnail?: string | null;
  } | null;
};
export declare type PaginatorPartsFragment = {
  __typename?: 'PaginatorInfo';
  count: number;
  currentPage: number;
  firstItem: number;
  hasMorePages: boolean;
  lastItem: number;
  lastPage: number;
  perPage: number;
  total: number;
};
export declare type TopAuthorsQueryVariables = Types.Exact<{
  limit?: Types.InputMaybe<Types.Scalars['Int']>;
  language?: Types.InputMaybe<Types.Scalars['String']>;
}>;
export declare type TopAuthorsQuery = {
  __typename?: 'Query';
  topAuthors: Array<{
    __typename?: 'Author';
    id: string;
    name: string;
    is_approved?: boolean | null;
    slug?: string | null;
    bio?: string | null;
    quote?: string | null;
    born?: string | null;
    death?: string | null;
    languages?: string | null;
    socials?: Array<{
      __typename?: 'ShopSocials';
      url: string;
      icon: string;
    }> | null;
    image?: {
      __typename?: 'Attachment';
      id?: string | null;
      original?: string | null;
      thumbnail?: string | null;
    } | null;
    cover_image?: {
      __typename?: 'Attachment';
      id?: string | null;
      original?: string | null;
      thumbnail?: string | null;
    } | null;
  }>;
};
export declare type AuthorQueryVariables = Types.Exact<{
  slug?: Types.InputMaybe<Types.Scalars['String']>;
  language?: Types.InputMaybe<Types.Scalars['String']>;
}>;
export declare type AuthorQuery = {
  __typename?: 'Query';
  author: {
    __typename?: 'Author';
    id: string;
    name: string;
    is_approved?: boolean | null;
    slug?: string | null;
    bio?: string | null;
    quote?: string | null;
    born?: string | null;
    death?: string | null;
    languages?: string | null;
    socials?: Array<{
      __typename?: 'ShopSocials';
      url: string;
      icon: string;
    }> | null;
    image?: {
      __typename?: 'Attachment';
      id?: string | null;
      original?: string | null;
      thumbnail?: string | null;
    } | null;
    cover_image?: {
      __typename?: 'Attachment';
      id?: string | null;
      original?: string | null;
      thumbnail?: string | null;
    } | null;
  };
};
export declare const AuthorPartsFragmentDoc: Apollo.DocumentNode;
export declare const PaginatorPartsFragmentDoc: Apollo.DocumentNode;
export declare const AuthorsDocument: Apollo.DocumentNode;
/**
 * __useAuthorsQuery__
 *
 * To run a query within a React component, call `useAuthorsQuery` and pass it any options that fit your needs.
 * When your component renders, `useAuthorsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useAuthorsQuery({
 *   variables: {
 *      text: // value for 'text'
 *      is_approved: // value for 'is_approved'
 *      orderBy: // value for 'orderBy'
 *      first: // value for 'first'
 *      page: // value for 'page'
 *      language: // value for 'language'
 *   },
 * });
 */

export declare function useAuthorsQuery(baseOptions?: Apollo.QueryHookOptions<AuthorsQuery, AuthorsQueryVariables>): Apollo.QueryResult<AuthorsQuery, Types.Exact<{
  text?: Types.InputMaybe<string> | undefined;
  is_approved?: Types.InputMaybe<boolean> | undefined;
  orderBy?: Types.InputMaybe<Types.QueryAuthorsOrderByOrderByClause | Types.QueryAuthorsOrderByOrderByClause[]> | undefined;
  first?: Types.InputMaybe<number> | undefined;
  page?: Types.InputMaybe<number> | undefined;
  language?: Types.InputMaybe<string> | undefined;
}>>;
export declare function useAuthorsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<AuthorsQuery, AuthorsQueryVariables>): Apollo.QueryTuple<AuthorsQuery, Types.Exact<{
  text?: Types.InputMaybe<string> | undefined;
  is_approved?: Types.InputMaybe<boolean> | undefined;
  orderBy?: Types.InputMaybe<Types.QueryAuthorsOrderByOrderByClause | Types.QueryAuthorsOrderByOrderByClause[]> | undefined;
  first?: Types.InputMaybe<number> | undefined;
  page?: Types.InputMaybe<number> | undefined;
  language?: Types.InputMaybe<string> | undefined;
}>>;
export declare type AuthorsQueryHookResult = ReturnType<typeof useAuthorsQuery>;
export declare type AuthorsLazyQueryHookResult = ReturnType<typeof useAuthorsLazyQuery>;
export declare type AuthorsQueryResult = Apollo.QueryResult<AuthorsQuery, AuthorsQueryVariables>;
export declare const TopAuthorsDocument: Apollo.DocumentNode;
/**
 * __useTopAuthorsQuery__
 *
 * To run a query within a React component, call `useTopAuthorsQuery` and pass it any options that fit your needs.
 * When your component renders, `useTopAuthorsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useTopAuthorsQuery({
 *   variables: {
 *      limit: // value for 'limit'
 *      language: // value for 'language'
 *   },
 * });
 */

export declare function useTopAuthorsQuery(baseOptions?: Apollo.QueryHookOptions<TopAuthorsQuery, TopAuthorsQueryVariables>): Apollo.QueryResult<TopAuthorsQuery, Types.Exact<{
  limit?: Types.InputMaybe<number> | undefined;
  language?: Types.InputMaybe<string> | undefined;
}>>;
export declare function useTopAuthorsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<TopAuthorsQuery, TopAuthorsQueryVariables>): Apollo.QueryTuple<TopAuthorsQuery, Types.Exact<{
  limit?: Types.InputMaybe<number> | undefined;
  language?: Types.InputMaybe<string> | undefined;
}>>;
export declare type TopAuthorsQueryHookResult = ReturnType<typeof useTopAuthorsQuery>;
export declare type TopAuthorsLazyQueryHookResult = ReturnType<typeof useTopAuthorsLazyQuery>;
export declare type TopAuthorsQueryResult = Apollo.QueryResult<TopAuthorsQuery, TopAuthorsQueryVariables>;
export declare const AuthorDocument: Apollo.DocumentNode;
/**
 * __useAuthorQuery__
 *
 * To run a query within a React component, call `useAuthorQuery` and pass it any options that fit your needs.
 * When your component renders, `useAuthorQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useAuthorQuery({
 *   variables: {
 *      slug: // value for 'slug'
 *      language: // value for 'language'
 *   },
 * });
 */

export declare function useAuthorQuery(baseOptions?: Apollo.QueryHookOptions<AuthorQuery, AuthorQueryVariables>): Apollo.QueryResult<AuthorQuery, Types.Exact<{
  slug?: Types.InputMaybe<string> | undefined;
  language?: Types.InputMaybe<string> | undefined;
}>>;
export declare function useAuthorLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<AuthorQuery, AuthorQueryVariables>): Apollo.QueryTuple<AuthorQuery, Types.Exact<{
  slug?: Types.InputMaybe<string> | undefined;
  language?: Types.InputMaybe<string> | undefined;
}>>;
export declare type AuthorQueryHookResult = ReturnType<typeof useAuthorQuery>;
export declare type AuthorLazyQueryHookResult = ReturnType<typeof useAuthorLazyQuery>;
export declare type AuthorQueryResult = Apollo.QueryResult<AuthorQuery, AuthorQueryVariables>;